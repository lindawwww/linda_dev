(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (factory());
}(this, (function () { 'use strict';

  // returns true if the Error object returns a stack string
  // with the signature of 'ErrorType: message'
  var v8Style = function v8StyleStackMessage() {
    var e = new Error('yep');
    if (!e.stack) return false
    if (e.stack.substr(0, 11) === 'Error: yep\n') return true
    return false
  };

  /**
   * Refomat the stack message to show the proper name rather than just 'Error'. This is
   * necessary because the internal class property of Error is what determines the beginning of
   * the stack message, and it is not accessible in JavaScript.
   */
  var reformat = function reformatV8Error(stack, name, msg) {
    var errorMessage = name;
    if (msg) errorMessage += ': ' + msg;
    stack = errorMessage + stack.slice(stack.indexOf('\n'));
    return stack
  };

  var v8StyleErrors = v8Style();


  function ErrorMaker(name, ParentError) {
    function NewError(message) {
      if (!(this instanceof NewError))
        return new NewError(message)

      // Use a try/catch block to capture the stack trace. Capturing the stack trace here is
      // necessary, otherwise we will get the stack trace at the time the new error class was created,
      // rather than when it is instantiated.  We add `message` and `name` so that the stack trace
      // string will match our current error class.
      try {
        throw new Error(message)
      }
      catch (err) {
        err.name = name;
        this.stack = err.stack;
      }

      // if we have v8-styled stack messages, then reformat
      if (v8StyleErrors) {
        if (this.stack) this.stack = reformat(this.stack, name, message);
      }

      this.message = message || '';
      this.name = name;
    }

    NewError.prototype = new (ParentError || Error)();
    NewError.prototype.constructor = NewError;
    NewError.prototype.inspect = function() {
      return this.message
        ? '[' + name + ': ' + this.message + ']'
        : '[' + name + ']'
    };
    NewError.prototype.name = name;

    return NewError
  }

  var customError = ErrorMaker;

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var es5 = createCommonjsModule(function (module) {
  var isES5 = (function(){
      return this === undefined;
  })();

  if (isES5) {
      module.exports = {
          freeze: Object.freeze,
          defineProperty: Object.defineProperty,
          getDescriptor: Object.getOwnPropertyDescriptor,
          keys: Object.keys,
          names: Object.getOwnPropertyNames,
          getPrototypeOf: Object.getPrototypeOf,
          isArray: Array.isArray,
          isES5: isES5,
          propertyIsWritable: function(obj, prop) {
              var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
              return !!(!descriptor || descriptor.writable || descriptor.set);
          }
      };
  } else {
      var has = {}.hasOwnProperty;
      var str = {}.toString;
      var proto = {}.constructor.prototype;

      var ObjectKeys = function (o) {
          var ret = [];
          for (var key in o) {
              if (has.call(o, key)) {
                  ret.push(key);
              }
          }
          return ret;
      };

      var ObjectGetDescriptor = function(o, key) {
          return {value: o[key]};
      };

      var ObjectDefineProperty = function (o, key, desc) {
          o[key] = desc.value;
          return o;
      };

      var ObjectFreeze = function (obj) {
          return obj;
      };

      var ObjectGetPrototypeOf = function (obj) {
          try {
              return Object(obj).constructor.prototype;
          }
          catch (e) {
              return proto;
          }
      };

      var ArrayIsArray = function (obj) {
          try {
              return str.call(obj) === "[object Array]";
          }
          catch(e) {
              return false;
          }
      };

      module.exports = {
          isArray: ArrayIsArray,
          keys: ObjectKeys,
          names: ObjectKeys,
          defineProperty: ObjectDefineProperty,
          getDescriptor: ObjectGetDescriptor,
          freeze: ObjectFreeze,
          getPrototypeOf: ObjectGetPrototypeOf,
          isES5: isES5,
          propertyIsWritable: function() {
              return true;
          }
      };
  }
  });
  var es5_1 = es5.freeze;
  var es5_2 = es5.defineProperty;
  var es5_3 = es5.getDescriptor;
  var es5_4 = es5.keys;
  var es5_5 = es5.names;
  var es5_6 = es5.getPrototypeOf;
  var es5_7 = es5.isArray;
  var es5_8 = es5.isES5;
  var es5_9 = es5.propertyIsWritable;

  var canEvaluate = typeof navigator == "undefined";
  var haveGetters = (function(){
      try {
          var o = {};
          es5.defineProperty(o, "f", {
              get: function () {
                  return 3;
              }
          });
          return o.f === 3;
      }
      catch (e) {
          return false;
      }

  })();

  var errorObj = {e: {}};
  var tryCatchTarget;
  function tryCatcher() {
      try {
          var target = tryCatchTarget;
          tryCatchTarget = null;
          return target.apply(this, arguments);
      } catch (e) {
          errorObj.e = e;
          return errorObj;
      }
  }
  function tryCatch(fn) {
      tryCatchTarget = fn;
      return tryCatcher;
  }

  var inherits = function(Child, Parent) {
      var hasProp = {}.hasOwnProperty;

      function T() {
          this.constructor = Child;
          this.constructor$ = Parent;
          for (var propertyName in Parent.prototype) {
              if (hasProp.call(Parent.prototype, propertyName) &&
                  propertyName.charAt(propertyName.length-1) !== "$"
             ) {
                  this[propertyName + "$"] = Parent.prototype[propertyName];
              }
          }
      }
      T.prototype = Parent.prototype;
      Child.prototype = new T();
      return Child.prototype;
  };


  function isPrimitive(val) {
      return val == null || val === true || val === false ||
          typeof val === "string" || typeof val === "number";

  }

  function isObject(value) {
      return !isPrimitive(value);
  }

  function maybeWrapAsError(maybeError) {
      if (!isPrimitive(maybeError)) return maybeError;

      return new Error(safeToString(maybeError));
  }

  function withAppended(target, appendee) {
      var len = target.length;
      var ret = new Array(len + 1);
      var i;
      for (i = 0; i < len; ++i) {
          ret[i] = target[i];
      }
      ret[i] = appendee;
      return ret;
  }

  function getDataPropertyOrDefault(obj, key, defaultValue) {
      if (es5.isES5) {
          var desc = Object.getOwnPropertyDescriptor(obj, key);

          if (desc != null) {
              return desc.get == null && desc.set == null
                      ? desc.value
                      : defaultValue;
          }
      } else {
          return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
      }
  }

  function notEnumerableProp(obj, name, value) {
      if (isPrimitive(obj)) return obj;
      var descriptor = {
          value: value,
          configurable: true,
          enumerable: false,
          writable: true
      };
      es5.defineProperty(obj, name, descriptor);
      return obj;
  }

  function thrower(r) {
      throw r;
  }

  var inheritedDataKeys = (function() {
      var excludedPrototypes = [
          Array.prototype,
          Object.prototype,
          Function.prototype
      ];

      var isExcludedProto = function(val) {
          for (var i = 0; i < excludedPrototypes.length; ++i) {
              if (excludedPrototypes[i] === val) {
                  return true;
              }
          }
          return false;
      };

      if (es5.isES5) {
          var getKeys = Object.getOwnPropertyNames;
          return function(obj) {
              var ret = [];
              var visitedKeys = Object.create(null);
              while (obj != null && !isExcludedProto(obj)) {
                  var keys;
                  try {
                      keys = getKeys(obj);
                  } catch (e) {
                      return ret;
                  }
                  for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key]) continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                          ret.push(key);
                      }
                  }
                  obj = es5.getPrototypeOf(obj);
              }
              return ret;
          };
      } else {
          var hasProp = {}.hasOwnProperty;
          return function(obj) {
              if (isExcludedProto(obj)) return [];
              var ret = [];

              /*jshint forin:false */
              enumeration: for (var key in obj) {
                  if (hasProp.call(obj, key)) {
                      ret.push(key);
                  } else {
                      for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                              continue enumeration;
                          }
                      }
                      ret.push(key);
                  }
              }
              return ret;
          };
      }

  })();

  var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
  function isClass(fn) {
      try {
          if (typeof fn === "function") {
              var keys = es5.names(fn.prototype);

              var hasMethods = es5.isES5 && keys.length > 1;
              var hasMethodsOtherThanConstructor = keys.length > 0 &&
                  !(keys.length === 1 && keys[0] === "constructor");
              var hasThisAssignmentAndStaticMethods =
                  thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

              if (hasMethods || hasMethodsOtherThanConstructor ||
                  hasThisAssignmentAndStaticMethods) {
                  return true;
              }
          }
          return false;
      } catch (e) {
          return false;
      }
  }

  function toFastProperties(obj) {
      return obj;
      eval(obj);
  }

  var rident = /^[a-z$_][a-z$_0-9]*$/i;
  function isIdentifier(str) {
      return rident.test(str);
  }

  function filledRange(count, prefix, suffix) {
      var ret = new Array(count);
      for(var i = 0; i < count; ++i) {
          ret[i] = prefix + i + suffix;
      }
      return ret;
  }

  function safeToString(obj) {
      try {
          return obj + "";
      } catch (e) {
          return "[no string representation]";
      }
  }

  function markAsOriginatingFromRejection(e) {
      try {
          notEnumerableProp(e, "isOperational", true);
      }
      catch(ignore) {}
  }

  function originatesFromRejection(e) {
      if (e == null) return false;
      return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
          e["isOperational"] === true);
  }

  function canAttachTrace(obj) {
      return obj instanceof Error && es5.propertyIsWritable(obj, "stack");
  }

  var ensureErrorObject = (function() {
      if (!("stack" in new Error())) {
          return function(value) {
              if (canAttachTrace(value)) return value;
              try {throw new Error(safeToString(value));}
              catch(err) {return err;}
          };
      } else {
          return function(value) {
              if (canAttachTrace(value)) return value;
              return new Error(safeToString(value));
          };
      }
  })();

  function classString(obj) {
      return {}.toString.call(obj);
  }

  function copyDescriptors(from, to, filter) {
      var keys = es5.names(from);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (filter(key)) {
              try {
                  es5.defineProperty(to, key, es5.getDescriptor(from, key));
              } catch (ignore) {}
          }
      }
  }

  var ret = {
      isClass: isClass,
      isIdentifier: isIdentifier,
      inheritedDataKeys: inheritedDataKeys,
      getDataPropertyOrDefault: getDataPropertyOrDefault,
      thrower: thrower,
      isArray: es5.isArray,
      haveGetters: haveGetters,
      notEnumerableProp: notEnumerableProp,
      isPrimitive: isPrimitive,
      isObject: isObject,
      canEvaluate: canEvaluate,
      errorObj: errorObj,
      tryCatch: tryCatch,
      inherits: inherits,
      withAppended: withAppended,
      maybeWrapAsError: maybeWrapAsError,
      toFastProperties: toFastProperties,
      filledRange: filledRange,
      toString: safeToString,
      canAttachTrace: canAttachTrace,
      ensureErrorObject: ensureErrorObject,
      originatesFromRejection: originatesFromRejection,
      markAsOriginatingFromRejection: markAsOriginatingFromRejection,
      classString: classString,
      copyDescriptors: copyDescriptors,
      hasDevTools: typeof chrome !== "undefined" && chrome &&
                   typeof chrome.loadTimes === "function",
      isNode: typeof process !== "undefined" &&
          classString(process).toLowerCase() === "[object process]"
  };
  ret.isRecentNode = ret.isNode && (function() {
      var version = process.versions.node.split(".").map(Number);
      return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
  })();

  if (ret.isNode) ret.toFastProperties(process);

  try {throw new Error(); } catch (e) {ret.lastLineError = e;}
  var util = ret;

  var schedule;

  var noAsyncScheduler = function() {
      throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
  };
  if (util.isNode && typeof MutationObserver === "undefined") {
      var GlobalSetImmediate = commonjsGlobal.setImmediate;
      var ProcessNextTick = process.nextTick;
      schedule = util.isRecentNode
                  ? function(fn) { GlobalSetImmediate.call(commonjsGlobal, fn); }
                  : function(fn) { ProcessNextTick.call(process, fn); };
  } else if ((typeof MutationObserver !== "undefined") &&
            !(typeof window !== "undefined" &&
              window.navigator &&
              window.navigator.standalone)) {
      schedule = function(fn) {
          var div = document.createElement("div");
          var observer = new MutationObserver(fn);
          observer.observe(div, {attributes: true});
          return function() { div.classList.toggle("foo"); };
      };
      schedule.isStatic = true;
  } else if (typeof setImmediate !== "undefined") {
      schedule = function (fn) {
          setImmediate(fn);
      };
  } else if (typeof setTimeout !== "undefined") {
      schedule = function (fn) {
          setTimeout(fn, 0);
      };
  } else {
      schedule = noAsyncScheduler;
  }
  var schedule_1 = schedule;

  function arrayMove(src, srcIndex, dst, dstIndex, len) {
      for (var j = 0; j < len; ++j) {
          dst[j + dstIndex] = src[j + srcIndex];
          src[j + srcIndex] = void 0;
      }
  }

  function Queue(capacity) {
      this._capacity = capacity;
      this._length = 0;
      this._front = 0;
  }

  Queue.prototype._willBeOverCapacity = function (size) {
      return this._capacity < size;
  };

  Queue.prototype._pushOne = function (arg) {
      var length = this.length();
      this._checkCapacity(length + 1);
      var i = (this._front + length) & (this._capacity - 1);
      this[i] = arg;
      this._length = length + 1;
  };

  Queue.prototype._unshiftOne = function(value) {
      var capacity = this._capacity;
      this._checkCapacity(this.length() + 1);
      var front = this._front;
      var i = (((( front - 1 ) &
                      ( capacity - 1) ) ^ capacity ) - capacity );
      this[i] = value;
      this._front = i;
      this._length = this.length() + 1;
  };

  Queue.prototype.unshift = function(fn, receiver, arg) {
      this._unshiftOne(arg);
      this._unshiftOne(receiver);
      this._unshiftOne(fn);
  };

  Queue.prototype.push = function (fn, receiver, arg) {
      var length = this.length() + 3;
      if (this._willBeOverCapacity(length)) {
          this._pushOne(fn);
          this._pushOne(receiver);
          this._pushOne(arg);
          return;
      }
      var j = this._front + length - 3;
      this._checkCapacity(length);
      var wrapMask = this._capacity - 1;
      this[(j + 0) & wrapMask] = fn;
      this[(j + 1) & wrapMask] = receiver;
      this[(j + 2) & wrapMask] = arg;
      this._length = length;
  };

  Queue.prototype.shift = function () {
      var front = this._front,
          ret = this[front];

      this[front] = undefined;
      this._front = (front + 1) & (this._capacity - 1);
      this._length--;
      return ret;
  };

  Queue.prototype.length = function () {
      return this._length;
  };

  Queue.prototype._checkCapacity = function (size) {
      if (this._capacity < size) {
          this._resizeTo(this._capacity << 1);
      }
  };

  Queue.prototype._resizeTo = function (capacity) {
      var oldCapacity = this._capacity;
      this._capacity = capacity;
      var front = this._front;
      var length = this._length;
      var moveItemsCount = (front + length) & (oldCapacity - 1);
      arrayMove(this, 0, this, oldCapacity, moveItemsCount);
  };

  var queue = Queue;

  var firstLineError;
  try {throw new Error(); } catch (e) {firstLineError = e;}
  var schedule$1 = schedule_1;



  function Async() {
      this._isTickUsed = false;
      this._lateQueue = new queue(16);
      this._normalQueue = new queue(16);
      this._trampolineEnabled = true;
      var self = this;
      this.drainQueues = function () {
          self._drainQueues();
      };
      this._schedule =
          schedule$1.isStatic ? schedule$1(this.drainQueues) : schedule$1;
  }

  Async.prototype.disableTrampolineIfNecessary = function() {
      if (util.hasDevTools) {
          this._trampolineEnabled = false;
      }
  };

  Async.prototype.enableTrampoline = function() {
      if (!this._trampolineEnabled) {
          this._trampolineEnabled = true;
          this._schedule = function(fn) {
              setTimeout(fn, 0);
          };
      }
  };

  Async.prototype.haveItemsQueued = function () {
      return this._normalQueue.length() > 0;
  };

  Async.prototype.throwLater = function(fn, arg) {
      if (arguments.length === 1) {
          arg = fn;
          fn = function () { throw arg; };
      }
      if (typeof setTimeout !== "undefined") {
          setTimeout(function() {
              fn(arg);
          }, 0);
      } else try {
          this._schedule(function() {
              fn(arg);
          });
      } catch (e) {
          throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
      }
  };

  function AsyncInvokeLater(fn, receiver, arg) {
      this._lateQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncInvoke(fn, receiver, arg) {
      this._normalQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncSettlePromises(promise) {
      this._normalQueue._pushOne(promise);
      this._queueTick();
  }

  if (!util.hasDevTools) {
      Async.prototype.invokeLater = AsyncInvokeLater;
      Async.prototype.invoke = AsyncInvoke;
      Async.prototype.settlePromises = AsyncSettlePromises;
  } else {
      if (schedule$1.isStatic) {
          schedule$1 = function(fn) { setTimeout(fn, 0); };
      }
      Async.prototype.invokeLater = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvokeLater.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  setTimeout(function() {
                      fn.call(receiver, arg);
                  }, 100);
              });
          }
      };

      Async.prototype.invoke = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvoke.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  fn.call(receiver, arg);
              });
          }
      };

      Async.prototype.settlePromises = function(promise) {
          if (this._trampolineEnabled) {
              AsyncSettlePromises.call(this, promise);
          } else {
              this._schedule(function() {
                  promise._settlePromises();
              });
          }
      };
  }

  Async.prototype.invokeFirst = function (fn, receiver, arg) {
      this._normalQueue.unshift(fn, receiver, arg);
      this._queueTick();
  };

  Async.prototype._drainQueue = function(queue$$1) {
      while (queue$$1.length() > 0) {
          var fn = queue$$1.shift();
          if (typeof fn !== "function") {
              fn._settlePromises();
              continue;
          }
          var receiver = queue$$1.shift();
          var arg = queue$$1.shift();
          fn.call(receiver, arg);
      }
  };

  Async.prototype._drainQueues = function () {
      this._drainQueue(this._normalQueue);
      this._reset();
      this._drainQueue(this._lateQueue);
  };

  Async.prototype._queueTick = function () {
      if (!this._isTickUsed) {
          this._isTickUsed = true;
          this._schedule(this.drainQueues);
      }
  };

  Async.prototype._reset = function () {
      this._isTickUsed = false;
  };

  var async = new Async();
  var firstLineError_1 = firstLineError;
  async.firstLineError = firstLineError_1;

  var Objectfreeze = es5.freeze;

  var inherits$1 = util.inherits;
  var notEnumerableProp$1 = util.notEnumerableProp;

  function subError(nameProperty, defaultMessage) {
      function SubError(message) {
          if (!(this instanceof SubError)) return new SubError(message);
          notEnumerableProp$1(this, "message",
              typeof message === "string" ? message : defaultMessage);
          notEnumerableProp$1(this, "name", nameProperty);
          if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
          } else {
              Error.call(this);
          }
      }
      inherits$1(SubError, Error);
      return SubError;
  }

  var _TypeError, _RangeError;
  var Warning = subError("Warning", "warning");
  var CancellationError = subError("CancellationError", "cancellation error");
  var TimeoutError = subError("TimeoutError", "timeout error");
  var AggregateError = subError("AggregateError", "aggregate error");
  try {
      _TypeError = TypeError;
      _RangeError = RangeError;
  } catch(e) {
      _TypeError = subError("TypeError", "type error");
      _RangeError = subError("RangeError", "range error");
  }

  var methods = ("join pop push shift unshift slice filter forEach some " +
      "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

  for (var i = 0; i < methods.length; ++i) {
      if (typeof Array.prototype[methods[i]] === "function") {
          AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
      }
  }

  es5.defineProperty(AggregateError.prototype, "length", {
      value: 0,
      configurable: false,
      writable: true,
      enumerable: true
  });
  AggregateError.prototype["isOperational"] = true;
  var level = 0;
  AggregateError.prototype.toString = function() {
      var indent = Array(level * 4 + 1).join(" ");
      var ret = "\n" + indent + "AggregateError of:" + "\n";
      level++;
      indent = Array(level * 4 + 1).join(" ");
      for (var i = 0; i < this.length; ++i) {
          var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
          var lines = str.split("\n");
          for (var j = 0; j < lines.length; ++j) {
              lines[j] = indent + lines[j];
          }
          str = lines.join("\n");
          ret += str + "\n";
      }
      level--;
      return ret;
  };

  function OperationalError(message) {
      if (!(this instanceof OperationalError))
          return new OperationalError(message);
      notEnumerableProp$1(this, "name", "OperationalError");
      notEnumerableProp$1(this, "message", message);
      this.cause = message;
      this["isOperational"] = true;

      if (message instanceof Error) {
          notEnumerableProp$1(this, "message", message.message);
          notEnumerableProp$1(this, "stack", message.stack);
      } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
      }

  }
  inherits$1(OperationalError, Error);

  var errorTypes = Error["__BluebirdErrorTypes__"];
  if (!errorTypes) {
      errorTypes = Objectfreeze({
          CancellationError: CancellationError,
          TimeoutError: TimeoutError,
          OperationalError: OperationalError,
          RejectionError: OperationalError,
          AggregateError: AggregateError
      });
      notEnumerableProp$1(Error, "__BluebirdErrorTypes__", errorTypes);
  }

  var errors = {
      Error: Error,
      TypeError: _TypeError,
      RangeError: _RangeError,
      CancellationError: errorTypes.CancellationError,
      OperationalError: errorTypes.OperationalError,
      TimeoutError: errorTypes.TimeoutError,
      AggregateError: errorTypes.AggregateError,
      Warning: Warning
  };

  var thenables = function(Promise, INTERNAL) {
  var util$$1 = util;
  var errorObj = util$$1.errorObj;
  var isObject = util$$1.isObject;

  function tryConvertToPromise(obj, context) {
      if (isObject(obj)) {
          if (obj instanceof Promise) {
              return obj;
          }
          else if (isAnyBluebirdPromise(obj)) {
              var ret = new Promise(INTERNAL);
              obj._then(
                  ret._fulfillUnchecked,
                  ret._rejectUncheckedCheckError,
                  ret._progressUnchecked,
                  ret,
                  null
              );
              return ret;
          }
          var then = util$$1.tryCatch(getThen)(obj);
          if (then === errorObj) {
              if (context) context._pushContext();
              var ret = Promise.reject(then.e);
              if (context) context._popContext();
              return ret;
          } else if (typeof then === "function") {
              return doThenable(obj, then, context);
          }
      }
      return obj;
  }

  function getThen(obj) {
      return obj.then;
  }

  var hasProp = {}.hasOwnProperty;
  function isAnyBluebirdPromise(obj) {
      return hasProp.call(obj, "_promise0");
  }

  function doThenable(x, then, context) {
      var promise = new Promise(INTERNAL);
      var ret = promise;
      if (context) context._pushContext();
      promise._captureStackTrace();
      if (context) context._popContext();
      var synchronous = true;
      var result = util$$1.tryCatch(then).call(x,
                                          resolveFromThenable,
                                          rejectFromThenable,
                                          progressFromThenable);
      synchronous = false;
      if (promise && result === errorObj) {
          promise._rejectCallback(result.e, true, true);
          promise = null;
      }

      function resolveFromThenable(value) {
          if (!promise) return;
          promise._resolveCallback(value);
          promise = null;
      }

      function rejectFromThenable(reason) {
          if (!promise) return;
          promise._rejectCallback(reason, synchronous, true);
          promise = null;
      }

      function progressFromThenable(value) {
          if (!promise) return;
          if (typeof promise._progress === "function") {
              promise._progress(value);
          }
      }
      return ret;
  }

  return tryConvertToPromise;
  };

  var promise_array = function(Promise, INTERNAL, tryConvertToPromise,
      apiRejection) {
  var util$$1 = util;
  var isArray = util$$1.isArray;

  function toResolutionValue(val) {
      switch(val) {
      case -2: return [];
      case -3: return {};
      }
  }

  function PromiseArray(values) {
      var promise = this._promise = new Promise(INTERNAL);
      var parent;
      if (values instanceof Promise) {
          parent = values;
          promise._propagateFrom(parent, 1 | 4);
      }
      this._values = values;
      this._length = 0;
      this._totalResolved = 0;
      this._init(undefined, -2);
  }
  PromiseArray.prototype.length = function () {
      return this._length;
  };

  PromiseArray.prototype.promise = function () {
      return this._promise;
  };

  PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
      var values = tryConvertToPromise(this._values, this._promise);
      if (values instanceof Promise) {
          values = values._target();
          this._values = values;
          if (values._isFulfilled()) {
              values = values._value();
              if (!isArray(values)) {
                  var err = new Promise.TypeError("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
                  this.__hardReject__(err);
                  return;
              }
          } else if (values._isPending()) {
              values._then(
                  init,
                  this._reject,
                  undefined,
                  this,
                  resolveValueIfEmpty
             );
              return;
          } else {
              this._reject(values._reason());
              return;
          }
      } else if (!isArray(values)) {
          this._promise._reject(apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a")._reason());
          return;
      }

      if (values.length === 0) {
          if (resolveValueIfEmpty === -5) {
              this._resolveEmptyArray();
          }
          else {
              this._resolve(toResolutionValue(resolveValueIfEmpty));
          }
          return;
      }
      var len = this.getActualLength(values.length);
      this._length = len;
      this._values = this.shouldCopyValues() ? new Array(len) : this._values;
      var promise = this._promise;
      for (var i = 0; i < len; ++i) {
          var isResolved = this._isResolved();
          var maybePromise = tryConvertToPromise(values[i], promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              if (isResolved) {
                  maybePromise._ignoreRejections();
              } else if (maybePromise._isPending()) {
                  maybePromise._proxyPromiseArray(this, i);
              } else if (maybePromise._isFulfilled()) {
                  this._promiseFulfilled(maybePromise._value(), i);
              } else {
                  this._promiseRejected(maybePromise._reason(), i);
              }
          } else if (!isResolved) {
              this._promiseFulfilled(maybePromise, i);
          }
      }
  };

  PromiseArray.prototype._isResolved = function () {
      return this._values === null;
  };

  PromiseArray.prototype._resolve = function (value) {
      this._values = null;
      this._promise._fulfill(value);
  };

  PromiseArray.prototype.__hardReject__ =
  PromiseArray.prototype._reject = function (reason) {
      this._values = null;
      this._promise._rejectCallback(reason, false, true);
  };

  PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
      this._promise._progress({
          index: index,
          value: progressValue
      });
  };


  PromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
      }
  };

  PromiseArray.prototype._promiseRejected = function (reason, index) {
      this._totalResolved++;
      this._reject(reason);
  };

  PromiseArray.prototype.shouldCopyValues = function () {
      return true;
  };

  PromiseArray.prototype.getActualLength = function (len) {
      return len;
  };

  return PromiseArray;
  };

  var captured_trace = function() {
  var async$$1 = async;
  var util$$1 = util;
  var bluebirdFramePattern =
      /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
  var stackFramePattern = null;
  var formatStack = null;
  var indentStackFrames = false;
  var warn;

  function CapturedTrace(parent) {
      this._parent = parent;
      var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
      captureStackTrace(this, CapturedTrace);
      if (length > 32) this.uncycle();
  }
  util$$1.inherits(CapturedTrace, Error);

  CapturedTrace.prototype.uncycle = function() {
      var length = this._length;
      if (length < 2) return;
      var nodes = [];
      var stackToIndex = {};

      for (var i = 0, node = this; node !== undefined; ++i) {
          nodes.push(node);
          node = node._parent;
      }
      length = this._length = i;
      for (var i = length - 1; i >= 0; --i) {
          var stack = nodes[i].stack;
          if (stackToIndex[stack] === undefined) {
              stackToIndex[stack] = i;
          }
      }
      for (var i = 0; i < length; ++i) {
          var currentStack = nodes[i].stack;
          var index = stackToIndex[currentStack];
          if (index !== undefined && index !== i) {
              if (index > 0) {
                  nodes[index - 1]._parent = undefined;
                  nodes[index - 1]._length = 1;
              }
              nodes[i]._parent = undefined;
              nodes[i]._length = 1;
              var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

              if (index < length - 1) {
                  cycleEdgeNode._parent = nodes[index + 1];
                  cycleEdgeNode._parent.uncycle();
                  cycleEdgeNode._length =
                      cycleEdgeNode._parent._length + 1;
              } else {
                  cycleEdgeNode._parent = undefined;
                  cycleEdgeNode._length = 1;
              }
              var currentChildLength = cycleEdgeNode._length + 1;
              for (var j = i - 2; j >= 0; --j) {
                  nodes[j]._length = currentChildLength;
                  currentChildLength++;
              }
              return;
          }
      }
  };

  CapturedTrace.prototype.parent = function() {
      return this._parent;
  };

  CapturedTrace.prototype.hasParent = function() {
      return this._parent !== undefined;
  };

  CapturedTrace.prototype.attachExtraTrace = function(error) {
      if (error.__stackCleaned__) return;
      this.uncycle();
      var parsed = CapturedTrace.parseStackAndMessage(error);
      var message = parsed.message;
      var stacks = [parsed.stack];

      var trace = this;
      while (trace !== undefined) {
          stacks.push(cleanStack(trace.stack.split("\n")));
          trace = trace._parent;
      }
      removeCommonRoots(stacks);
      removeDuplicateOrEmptyJumps(stacks);
      util$$1.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
      util$$1.notEnumerableProp(error, "__stackCleaned__", true);
  };

  function reconstructStack(message, stacks) {
      for (var i = 0; i < stacks.length - 1; ++i) {
          stacks[i].push("From previous event:");
          stacks[i] = stacks[i].join("\n");
      }
      if (i < stacks.length) {
          stacks[i] = stacks[i].join("\n");
      }
      return message + "\n" + stacks.join("\n");
  }

  function removeDuplicateOrEmptyJumps(stacks) {
      for (var i = 0; i < stacks.length; ++i) {
          if (stacks[i].length === 0 ||
              ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
              stacks.splice(i, 1);
              i--;
          }
      }
  }

  function removeCommonRoots(stacks) {
      var current = stacks[0];
      for (var i = 1; i < stacks.length; ++i) {
          var prev = stacks[i];
          var currentLastIndex = current.length - 1;
          var currentLastLine = current[currentLastIndex];
          var commonRootMeetPoint = -1;

          for (var j = prev.length - 1; j >= 0; --j) {
              if (prev[j] === currentLastLine) {
                  commonRootMeetPoint = j;
                  break;
              }
          }

          for (var j = commonRootMeetPoint; j >= 0; --j) {
              var line = prev[j];
              if (current[currentLastIndex] === line) {
                  current.pop();
                  currentLastIndex--;
              } else {
                  break;
              }
          }
          current = prev;
      }
  }

  function cleanStack(stack) {
      var ret = [];
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          var isTraceLine = stackFramePattern.test(line) ||
              "    (No stack trace)" === line;
          var isInternalFrame = isTraceLine && shouldIgnore(line);
          if (isTraceLine && !isInternalFrame) {
              if (indentStackFrames && line.charAt(0) !== " ") {
                  line = "    " + line;
              }
              ret.push(line);
          }
      }
      return ret;
  }

  function stackFramesAsArray(error) {
      var stack = error.stack.replace(/\s+$/g, "").split("\n");
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
              break;
          }
      }
      if (i > 0) {
          stack = stack.slice(i);
      }
      return stack;
  }

  CapturedTrace.parseStackAndMessage = function(error) {
      var stack = error.stack;
      var message = error.toString();
      stack = typeof stack === "string" && stack.length > 0
                  ? stackFramesAsArray(error) : ["    (No stack trace)"];
      return {
          message: message,
          stack: cleanStack(stack)
      };
  };

  CapturedTrace.formatAndLogError = function(error, title) {
      if (typeof console !== "undefined") {
          var message;
          if (typeof error === "object" || typeof error === "function") {
              var stack = error.stack;
              message = title + formatStack(stack, error);
          } else {
              message = title + String(error);
          }
          if (typeof warn === "function") {
              warn(message);
          } else if (typeof console.log === "function" ||
              typeof console.log === "object") {
              console.log(message);
          }
      }
  };

  CapturedTrace.unhandledRejection = function (reason) {
      CapturedTrace.formatAndLogError(reason, "^--- With additional stack trace: ");
  };

  CapturedTrace.isSupported = function () {
      return typeof captureStackTrace === "function";
  };

  CapturedTrace.fireRejectionEvent =
  function(name, localHandler, reason, promise) {
      var localEventFired = false;
      try {
          if (typeof localHandler === "function") {
              localEventFired = true;
              if (name === "rejectionHandled") {
                  localHandler(promise);
              } else {
                  localHandler(reason, promise);
              }
          }
      } catch (e) {
          async$$1.throwLater(e);
      }

      var globalEventFired = false;
      try {
          globalEventFired = fireGlobalEvent(name, reason, promise);
      } catch (e) {
          globalEventFired = true;
          async$$1.throwLater(e);
      }

      var domEventFired = false;
      if (fireDomEvent) {
          try {
              domEventFired = fireDomEvent(name.toLowerCase(), {
                  reason: reason,
                  promise: promise
              });
          } catch (e) {
              domEventFired = true;
              async$$1.throwLater(e);
          }
      }

      if (!globalEventFired && !localEventFired && !domEventFired &&
          name === "unhandledRejection") {
          CapturedTrace.formatAndLogError(reason, "Unhandled rejection ");
      }
  };

  function formatNonError(obj) {
      var str;
      if (typeof obj === "function") {
          str = "[function " +
              (obj.name || "anonymous") +
              "]";
      } else {
          str = obj.toString();
          var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
          if (ruselessToString.test(str)) {
              try {
                  var newStr = JSON.stringify(obj);
                  str = newStr;
              }
              catch(e) {

              }
          }
          if (str.length === 0) {
              str = "(empty array)";
          }
      }
      return ("(<" + snip(str) + ">, no stack trace)");
  }

  function snip(str) {
      var maxChars = 41;
      if (str.length < maxChars) {
          return str;
      }
      return str.substr(0, maxChars - 3) + "...";
  }

  var shouldIgnore = function() { return false; };
  var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
  function parseLineInfo(line) {
      var matches = line.match(parseLineInfoRegex);
      if (matches) {
          return {
              fileName: matches[1],
              line: parseInt(matches[2], 10)
          };
      }
  }
  CapturedTrace.setBounds = function(firstLineError, lastLineError) {
      if (!CapturedTrace.isSupported()) return;
      var firstStackLines = firstLineError.stack.split("\n");
      var lastStackLines = lastLineError.stack.split("\n");
      var firstIndex = -1;
      var lastIndex = -1;
      var firstFileName;
      var lastFileName;
      for (var i = 0; i < firstStackLines.length; ++i) {
          var result = parseLineInfo(firstStackLines[i]);
          if (result) {
              firstFileName = result.fileName;
              firstIndex = result.line;
              break;
          }
      }
      for (var i = 0; i < lastStackLines.length; ++i) {
          var result = parseLineInfo(lastStackLines[i]);
          if (result) {
              lastFileName = result.fileName;
              lastIndex = result.line;
              break;
          }
      }
      if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
          firstFileName !== lastFileName || firstIndex >= lastIndex) {
          return;
      }

      shouldIgnore = function(line) {
          if (bluebirdFramePattern.test(line)) return true;
          var info = parseLineInfo(line);
          if (info) {
              if (info.fileName === firstFileName &&
                  (firstIndex <= info.line && info.line <= lastIndex)) {
                  return true;
              }
          }
          return false;
      };
  };

  var captureStackTrace = (function stackDetection() {
      var v8stackFramePattern = /^\s*at\s*/;
      var v8stackFormatter = function(stack, error) {
          if (typeof stack === "string") return stack;

          if (error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      if (typeof Error.stackTraceLimit === "number" &&
          typeof Error.captureStackTrace === "function") {
          Error.stackTraceLimit = Error.stackTraceLimit + 6;
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          var captureStackTrace = Error.captureStackTrace;

          shouldIgnore = function(line) {
              return bluebirdFramePattern.test(line);
          };
          return function(receiver, ignoreUntil) {
              Error.stackTraceLimit = Error.stackTraceLimit + 6;
              captureStackTrace(receiver, ignoreUntil);
              Error.stackTraceLimit = Error.stackTraceLimit - 6;
          };
      }
      var err = new Error();

      if (typeof err.stack === "string" &&
          err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
          stackFramePattern = /@/;
          formatStack = v8stackFormatter;
          indentStackFrames = true;
          return function captureStackTrace(o) {
              o.stack = new Error().stack;
          };
      }

      var hasStackAfterThrow;
      try { throw new Error(); }
      catch(e) {
          hasStackAfterThrow = ("stack" in e);
      }
      if (!("stack" in err) && hasStackAfterThrow &&
          typeof Error.stackTraceLimit === "number") {
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          return function captureStackTrace(o) {
              Error.stackTraceLimit = Error.stackTraceLimit + 6;
              try { throw new Error(); }
              catch(e) { o.stack = e.stack; }
              Error.stackTraceLimit = Error.stackTraceLimit - 6;
          };
      }

      formatStack = function(stack, error) {
          if (typeof stack === "string") return stack;

          if ((typeof error === "object" ||
              typeof error === "function") &&
              error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      return null;

  })([]);

  var fireDomEvent;
  var fireGlobalEvent = (function() {
      if (util$$1.isNode) {
          return function(name, reason, promise) {
              if (name === "rejectionHandled") {
                  return process.emit(name, promise);
              } else {
                  return process.emit(name, reason, promise);
              }
          };
      } else {
          var customEventWorks = false;
          var anyEventWorks = true;
          try {
              var ev = new self.CustomEvent("test");
              customEventWorks = ev instanceof CustomEvent;
          } catch (e) {}
          if (!customEventWorks) {
              try {
                  var event = document.createEvent("CustomEvent");
                  event.initCustomEvent("testingtheevent", false, true, {});
                  self.dispatchEvent(event);
              } catch (e) {
                  anyEventWorks = false;
              }
          }
          if (anyEventWorks) {
              fireDomEvent = function(type, detail) {
                  var event;
                  if (customEventWorks) {
                      event = new self.CustomEvent(type, {
                          detail: detail,
                          bubbles: false,
                          cancelable: true
                      });
                  } else if (self.dispatchEvent) {
                      event = document.createEvent("CustomEvent");
                      event.initCustomEvent(type, false, true, detail);
                  }

                  return event ? !self.dispatchEvent(event) : false;
              };
          }

          var toWindowMethodNameMap = {};
          toWindowMethodNameMap["unhandledRejection"] = ("on" +
              "unhandledRejection").toLowerCase();
          toWindowMethodNameMap["rejectionHandled"] = ("on" +
              "rejectionHandled").toLowerCase();

          return function(name, reason, promise) {
              var methodName = toWindowMethodNameMap[name];
              var method = self[methodName];
              if (!method) return false;
              if (name === "rejectionHandled") {
                  method.call(self, promise);
              } else {
                  method.call(self, reason, promise);
              }
              return true;
          };
      }
  })();

  if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
      warn = function (message) {
          console.warn(message);
      };
      if (util$$1.isNode && process.stderr.isTTY) {
          warn = function(message) {
              process.stderr.write("\u001b[31m" + message + "\u001b[39m\n");
          };
      } else if (!util$$1.isNode && typeof (new Error().stack) === "string") {
          warn = function(message) {
              console.warn("%c" + message, "color: red");
          };
      }
  }

  return CapturedTrace;
  };

  var debuggability = function(Promise, CapturedTrace) {
  var getDomain = Promise._getDomain;
  var async$$1 = async;
  var Warning = errors.Warning;
  var util$$1 = util;
  var canAttachTrace = util$$1.canAttachTrace;
  var unhandledRejectionHandled;
  var possiblyUnhandledRejection;
  var debugging = util$$1.isNode &&
                      (!!process.env["BLUEBIRD_DEBUG"] ||
                       process.env["NODE_ENV"] === "development");

  if (util$$1.isNode && process.env["BLUEBIRD_DEBUG"] == 0) debugging = false;

  if (debugging) {
      async$$1.disableTrampolineIfNecessary();
  }

  Promise.prototype._ignoreRejections = function() {
      this._unsetRejectionIsUnhandled();
      this._bitField = this._bitField | 16777216;
  };

  Promise.prototype._ensurePossibleRejectionHandled = function () {
      if ((this._bitField & 16777216) !== 0) return;
      this._setRejectionIsUnhandled();
      async$$1.invokeLater(this._notifyUnhandledRejection, this, undefined);
  };

  Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
      CapturedTrace.fireRejectionEvent("rejectionHandled",
                                    unhandledRejectionHandled, undefined, this);
  };

  Promise.prototype._notifyUnhandledRejection = function () {
      if (this._isRejectionUnhandled()) {
          var reason = this._getCarriedStackTrace() || this._settledValue;
          this._setUnhandledRejectionIsNotified();
          CapturedTrace.fireRejectionEvent("unhandledRejection",
                                        possiblyUnhandledRejection, reason, this);
      }
  };

  Promise.prototype._setUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField | 524288;
  };

  Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField & (~524288);
  };

  Promise.prototype._isUnhandledRejectionNotified = function () {
      return (this._bitField & 524288) > 0;
  };

  Promise.prototype._setRejectionIsUnhandled = function () {
      this._bitField = this._bitField | 2097152;
  };

  Promise.prototype._unsetRejectionIsUnhandled = function () {
      this._bitField = this._bitField & (~2097152);
      if (this._isUnhandledRejectionNotified()) {
          this._unsetUnhandledRejectionIsNotified();
          this._notifyUnhandledRejectionIsHandled();
      }
  };

  Promise.prototype._isRejectionUnhandled = function () {
      return (this._bitField & 2097152) > 0;
  };

  Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
      this._bitField = this._bitField | 1048576;
      this._fulfillmentHandler0 = capturedTrace;
  };

  Promise.prototype._isCarryingStackTrace = function () {
      return (this._bitField & 1048576) > 0;
  };

  Promise.prototype._getCarriedStackTrace = function () {
      return this._isCarryingStackTrace()
          ? this._fulfillmentHandler0
          : undefined;
  };

  Promise.prototype._captureStackTrace = function () {
      if (debugging) {
          this._trace = new CapturedTrace(this._peekContext());
      }
      return this;
  };

  Promise.prototype._attachExtraTrace = function (error, ignoreSelf) {
      if (debugging && canAttachTrace(error)) {
          var trace = this._trace;
          if (trace !== undefined) {
              if (ignoreSelf) trace = trace._parent;
          }
          if (trace !== undefined) {
              trace.attachExtraTrace(error);
          } else if (!error.__stackCleaned__) {
              var parsed = CapturedTrace.parseStackAndMessage(error);
              util$$1.notEnumerableProp(error, "stack",
                  parsed.message + "\n" + parsed.stack.join("\n"));
              util$$1.notEnumerableProp(error, "__stackCleaned__", true);
          }
      }
  };

  Promise.prototype._warn = function(message) {
      var warning = new Warning(message);
      var ctx = this._peekContext();
      if (ctx) {
          ctx.attachExtraTrace(warning);
      } else {
          var parsed = CapturedTrace.parseStackAndMessage(warning);
          warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
      }
      CapturedTrace.formatAndLogError(warning, "");
  };

  Promise.onPossiblyUnhandledRejection = function (fn) {
      var domain = getDomain();
      possiblyUnhandledRejection =
          typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                   : undefined;
  };

  Promise.onUnhandledRejectionHandled = function (fn) {
      var domain = getDomain();
      unhandledRejectionHandled =
          typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                   : undefined;
  };

  Promise.longStackTraces = function () {
      if (async$$1.haveItemsQueued() &&
          debugging === false
     ) {
          throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/DT1qyG\u000a");
      }
      debugging = CapturedTrace.isSupported();
      if (debugging) {
          async$$1.disableTrampolineIfNecessary();
      }
  };

  Promise.hasLongStackTraces = function () {
      return debugging && CapturedTrace.isSupported();
  };

  if (!CapturedTrace.isSupported()) {
      Promise.longStackTraces = function(){};
      debugging = false;
  }

  return function() {
      return debugging;
  };
  };

  var context = function(Promise, CapturedTrace, isDebugging) {
  var contextStack = [];
  function Context() {
      this._trace = new CapturedTrace(peekContext());
  }
  Context.prototype._pushContext = function () {
      if (!isDebugging()) return;
      if (this._trace !== undefined) {
          contextStack.push(this._trace);
      }
  };

  Context.prototype._popContext = function () {
      if (!isDebugging()) return;
      if (this._trace !== undefined) {
          contextStack.pop();
      }
  };

  function createContext() {
      if (isDebugging()) return new Context();
  }

  function peekContext() {
      var lastIndex = contextStack.length - 1;
      if (lastIndex >= 0) {
          return contextStack[lastIndex];
      }
      return undefined;
  }

  Promise.prototype._peekContext = peekContext;
  Promise.prototype._pushContext = Context.prototype._pushContext;
  Promise.prototype._popContext = Context.prototype._popContext;

  return createContext;
  };

  var catch_filter = function(NEXT_FILTER) {
  var util$$1 = util;
  var errors$$1 = errors;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  var keys = es5.keys;
  var TypeError = errors$$1.TypeError;

  function CatchFilter(instances, callback, promise) {
      this._instances = instances;
      this._callback = callback;
      this._promise = promise;
  }

  function safePredicate(predicate, e) {
      var safeObject = {};
      var retfilter = tryCatch(predicate).call(safeObject, e);

      if (retfilter === errorObj) return retfilter;

      var safeKeys = keys(safeObject);
      if (safeKeys.length) {
          errorObj.e = new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a");
          return errorObj;
      }
      return retfilter;
  }

  CatchFilter.prototype.doFilter = function (e) {
      var cb = this._callback;
      var promise = this._promise;
      var boundTo = promise._boundValue();
      for (var i = 0, len = this._instances.length; i < len; ++i) {
          var item = this._instances[i];
          var itemIsErrorType = item === Error ||
              (item != null && item.prototype instanceof Error);

          if (itemIsErrorType && e instanceof item) {
              var ret = tryCatch(cb).call(boundTo, e);
              if (ret === errorObj) {
                  NEXT_FILTER.e = ret.e;
                  return NEXT_FILTER;
              }
              return ret;
          } else if (typeof item === "function" && !itemIsErrorType) {
              var shouldHandle = safePredicate(item, e);
              if (shouldHandle === errorObj) {
                  e = errorObj.e;
                  break;
              } else if (shouldHandle) {
                  var ret = tryCatch(cb).call(boundTo, e);
                  if (ret === errorObj) {
                      NEXT_FILTER.e = ret.e;
                      return NEXT_FILTER;
                  }
                  return ret;
              }
          }
      }
      NEXT_FILTER.e = e;
      return NEXT_FILTER;
  };

  return CatchFilter;
  };

  var maybeWrapAsError$1 = util.maybeWrapAsError;

  var TimeoutError$1 = errors.TimeoutError;
  var OperationalError$1 = errors.OperationalError;
  var haveGetters$1 = util.haveGetters;


  function isUntypedError(obj) {
      return obj instanceof Error &&
          es5.getPrototypeOf(obj) === Error.prototype;
  }

  var rErrorKey = /^(?:name|message|stack|cause)$/;
  function wrapAsOperationalError(obj) {
      var ret;
      if (isUntypedError(obj)) {
          ret = new OperationalError$1(obj);
          ret.name = obj.name;
          ret.message = obj.message;
          ret.stack = obj.stack;
          var keys = es5.keys(obj);
          for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (!rErrorKey.test(key)) {
                  ret[key] = obj[key];
              }
          }
          return ret;
      }
      util.markAsOriginatingFromRejection(obj);
      return obj;
  }

  function nodebackForPromise(promise) {
      return function(err, value) {
          if (promise === null) return;

          if (err) {
              var wrapped = wrapAsOperationalError(maybeWrapAsError$1(err));
              promise._attachExtraTrace(wrapped);
              promise._reject(wrapped);
          } else if (arguments.length > 2) {
              var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
              promise._fulfill(args);
          } else {
              promise._fulfill(value);
          }

          promise = null;
      };
  }


  var PromiseResolver;
  if (!haveGetters$1) {
      PromiseResolver = function (promise) {
          this.promise = promise;
          this.asCallback = nodebackForPromise(promise);
          this.callback = this.asCallback;
      };
  }
  else {
      PromiseResolver = function (promise) {
          this.promise = promise;
      };
  }
  if (haveGetters$1) {
      var prop = {
          get: function() {
              return nodebackForPromise(this.promise);
          }
      };
      es5.defineProperty(PromiseResolver.prototype, "asCallback", prop);
      es5.defineProperty(PromiseResolver.prototype, "callback", prop);
  }

  PromiseResolver._nodebackForPromise = nodebackForPromise;

  PromiseResolver.prototype.toString = function () {
      return "[object PromiseResolver]";
  };

  PromiseResolver.prototype.resolve =
  PromiseResolver.prototype.fulfill = function (value) {
      if (!(this instanceof PromiseResolver)) {
          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
      }
      this.promise._resolveCallback(value);
  };

  PromiseResolver.prototype.reject = function (reason) {
      if (!(this instanceof PromiseResolver)) {
          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
      }
      this.promise._rejectCallback(reason);
  };

  PromiseResolver.prototype.progress = function (value) {
      if (!(this instanceof PromiseResolver)) {
          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
      }
      this.promise._progress(value);
  };

  PromiseResolver.prototype.cancel = function (err) {
      this.promise.cancel(err);
  };

  PromiseResolver.prototype.timeout = function () {
      this.reject(new TimeoutError$1("timeout"));
  };

  PromiseResolver.prototype.isResolved = function () {
      return this.promise.isResolved();
  };

  PromiseResolver.prototype.toJSON = function () {
      return this.promise.toJSON();
  };

  var promise_resolver = PromiseResolver;

  var progress = function(Promise, PromiseArray) {
  var util$$1 = util;
  var async$$1 = async;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;

  Promise.prototype.progressed = function (handler) {
      return this._then(undefined, undefined, handler, undefined, undefined);
  };

  Promise.prototype._progress = function (progressValue) {
      if (this._isFollowingOrFulfilledOrRejected()) return;
      this._target()._progressUnchecked(progressValue);

  };

  Promise.prototype._progressHandlerAt = function (index) {
      return index === 0
          ? this._progressHandler0
          : this[(index << 2) + index - 5 + 2];
  };

  Promise.prototype._doProgressWith = function (progression) {
      var progressValue = progression.value;
      var handler = progression.handler;
      var promise = progression.promise;
      var receiver = progression.receiver;

      var ret = tryCatch(handler).call(receiver, progressValue);
      if (ret === errorObj) {
          if (ret.e != null &&
              ret.e.name !== "StopProgressPropagation") {
              var trace = util$$1.canAttachTrace(ret.e)
                  ? ret.e : new Error(util$$1.toString(ret.e));
              promise._attachExtraTrace(trace);
              promise._progress(ret.e);
          }
      } else if (ret instanceof Promise) {
          ret._then(promise._progress, null, null, promise, undefined);
      } else {
          promise._progress(ret);
      }
  };


  Promise.prototype._progressUnchecked = function (progressValue) {
      var len = this._length();
      var progress = this._progress;
      for (var i = 0; i < len; i++) {
          var handler = this._progressHandlerAt(i);
          var promise = this._promiseAt(i);
          if (!(promise instanceof Promise)) {
              var receiver = this._receiverAt(i);
              if (typeof handler === "function") {
                  handler.call(receiver, progressValue, promise);
              } else if (receiver instanceof PromiseArray &&
                         !receiver._isResolved()) {
                  receiver._promiseProgressed(progressValue, promise);
              }
              continue;
          }

          if (typeof handler === "function") {
              async$$1.invoke(this._doProgressWith, this, {
                  handler: handler,
                  promise: promise,
                  receiver: this._receiverAt(i),
                  value: progressValue
              });
          } else {
              async$$1.invoke(progress, promise, progressValue);
          }
      }
  };
  };

  var method =
  function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
  var util$$1 = util;
  var tryCatch = util$$1.tryCatch;

  Promise.method = function (fn) {
      if (typeof fn !== "function") {
          throw new Promise.TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      }
      return function () {
          var ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._pushContext();
          var value = tryCatch(fn).apply(this, arguments);
          ret._popContext();
          ret._resolveFromSyncValue(value);
          return ret;
      };
  };

  Promise.attempt = Promise["try"] = function (fn, args, ctx) {
      if (typeof fn !== "function") {
          return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      }
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._pushContext();
      var value = util$$1.isArray(args)
          ? tryCatch(fn).apply(ctx, args)
          : tryCatch(fn).call(ctx, args);
      ret._popContext();
      ret._resolveFromSyncValue(value);
      return ret;
  };

  Promise.prototype._resolveFromSyncValue = function (value) {
      if (value === util$$1.errorObj) {
          this._rejectCallback(value.e, false, true);
      } else {
          this._resolveCallback(value, true);
      }
  };
  };

  var bind = function(Promise, INTERNAL, tryConvertToPromise) {
  var rejectThis = function(_, e) {
      this._reject(e);
  };

  var targetRejected = function(e, context) {
      context.promiseRejectionQueued = true;
      context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
  };

  var bindingResolved = function(thisArg, context) {
      if (this._isPending()) {
          this._resolveCallback(context.target);
      }
  };

  var bindingRejected = function(e, context) {
      if (!context.promiseRejectionQueued) this._reject(e);
  };

  Promise.prototype.bind = function (thisArg) {
      var maybePromise = tryConvertToPromise(thisArg);
      var ret = new Promise(INTERNAL);
      ret._propagateFrom(this, 1);
      var target = this._target();

      ret._setBoundTo(maybePromise);
      if (maybePromise instanceof Promise) {
          var context = {
              promiseRejectionQueued: false,
              promise: ret,
              target: target,
              bindingPromise: maybePromise
          };
          target._then(INTERNAL, targetRejected, ret._progress, ret, context);
          maybePromise._then(
              bindingResolved, bindingRejected, ret._progress, ret, context);
      } else {
          ret._resolveCallback(target);
      }
      return ret;
  };

  Promise.prototype._setBoundTo = function (obj) {
      if (obj !== undefined) {
          this._bitField = this._bitField | 131072;
          this._boundTo = obj;
      } else {
          this._bitField = this._bitField & (~131072);
      }
  };

  Promise.prototype._isBound = function () {
      return (this._bitField & 131072) === 131072;
  };

  Promise.bind = function (thisArg, value) {
      var maybePromise = tryConvertToPromise(thisArg);
      var ret = new Promise(INTERNAL);

      ret._setBoundTo(maybePromise);
      if (maybePromise instanceof Promise) {
          maybePromise._then(function() {
              ret._resolveCallback(value);
          }, ret._reject, ret._progress, ret, null);
      } else {
          ret._resolveCallback(value);
      }
      return ret;
  };
  };

  var _finally = function(Promise, NEXT_FILTER, tryConvertToPromise) {
  var util$$1 = util;
  var isPrimitive = util$$1.isPrimitive;
  var thrower = util$$1.thrower;

  function returnThis() {
      return this;
  }
  function throwThis() {
      throw this;
  }
  function return$(r) {
      return function() {
          return r;
      };
  }
  function throw$(r) {
      return function() {
          throw r;
      };
  }
  function promisedFinally(ret, reasonOrValue, isFulfilled) {
      var then;
      if (isPrimitive(reasonOrValue)) {
          then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
      } else {
          then = isFulfilled ? returnThis : throwThis;
      }
      return ret._then(then, thrower, undefined, reasonOrValue, undefined);
  }

  function finallyHandler(reasonOrValue) {
      var promise = this.promise;
      var handler = this.handler;

      var ret = promise._isBound()
                      ? handler.call(promise._boundValue())
                      : handler();

      if (ret !== undefined) {
          var maybePromise = tryConvertToPromise(ret, promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              return promisedFinally(maybePromise, reasonOrValue,
                                      promise.isFulfilled());
          }
      }

      if (promise.isRejected()) {
          NEXT_FILTER.e = reasonOrValue;
          return NEXT_FILTER;
      } else {
          return reasonOrValue;
      }
  }

  function tapHandler(value) {
      var promise = this.promise;
      var handler = this.handler;

      var ret = promise._isBound()
                      ? handler.call(promise._boundValue(), value)
                      : handler(value);

      if (ret !== undefined) {
          var maybePromise = tryConvertToPromise(ret, promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              return promisedFinally(maybePromise, value, true);
          }
      }
      return value;
  }

  Promise.prototype._passThroughHandler = function (handler, isFinally) {
      if (typeof handler !== "function") return this.then();

      var promiseAndHandler = {
          promise: this,
          handler: handler
      };

      return this._then(
              isFinally ? finallyHandler : tapHandler,
              isFinally ? finallyHandler : undefined, undefined,
              promiseAndHandler, undefined);
  };

  Promise.prototype.lastly =
  Promise.prototype["finally"] = function (handler) {
      return this._passThroughHandler(handler, true);
  };

  Promise.prototype.tap = function (handler) {
      return this._passThroughHandler(handler, false);
  };
  };

  var isPrimitive$1 = util.isPrimitive;

  var direct_resolve = function(Promise) {
  var returner = function () {
      return this;
  };
  var thrower = function () {
      throw this;
  };
  var returnUndefined = function() {};
  var throwUndefined = function() {
      throw undefined;
  };

  var wrapper = function (value, action) {
      if (action === 1) {
          return function () {
              throw value;
          };
      } else if (action === 2) {
          return function () {
              return value;
          };
      }
  };


  Promise.prototype["return"] =
  Promise.prototype.thenReturn = function (value) {
      if (value === undefined) return this.then(returnUndefined);

      if (isPrimitive$1(value)) {
          return this._then(
              wrapper(value, 2),
              undefined,
              undefined,
              undefined,
              undefined
         );
      } else if (value instanceof Promise) {
          value._ignoreRejections();
      }
      return this._then(returner, undefined, undefined, value, undefined);
  };

  Promise.prototype["throw"] =
  Promise.prototype.thenThrow = function (reason) {
      if (reason === undefined) return this.then(throwUndefined);

      if (isPrimitive$1(reason)) {
          return this._then(
              wrapper(reason, 1),
              undefined,
              undefined,
              undefined,
              undefined
         );
      }
      return this._then(thrower, undefined, undefined, reason, undefined);
  };
  };

  var synchronous_inspection = function(Promise) {
  function PromiseInspection(promise) {
      if (promise !== undefined) {
          promise = promise._target();
          this._bitField = promise._bitField;
          this._settledValue = promise._settledValue;
      }
      else {
          this._bitField = 0;
          this._settledValue = undefined;
      }
  }

  PromiseInspection.prototype.value = function () {
      if (!this.isFulfilled()) {
          throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
      }
      return this._settledValue;
  };

  PromiseInspection.prototype.error =
  PromiseInspection.prototype.reason = function () {
      if (!this.isRejected()) {
          throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
      }
      return this._settledValue;
  };

  PromiseInspection.prototype.isFulfilled =
  Promise.prototype._isFulfilled = function () {
      return (this._bitField & 268435456) > 0;
  };

  PromiseInspection.prototype.isRejected =
  Promise.prototype._isRejected = function () {
      return (this._bitField & 134217728) > 0;
  };

  PromiseInspection.prototype.isPending =
  Promise.prototype._isPending = function () {
      return (this._bitField & 402653184) === 0;
  };

  PromiseInspection.prototype.isResolved =
  Promise.prototype._isResolved = function () {
      return (this._bitField & 402653184) > 0;
  };

  Promise.prototype.isPending = function() {
      return this._target()._isPending();
  };

  Promise.prototype.isRejected = function() {
      return this._target()._isRejected();
  };

  Promise.prototype.isFulfilled = function() {
      return this._target()._isFulfilled();
  };

  Promise.prototype.isResolved = function() {
      return this._target()._isResolved();
  };

  Promise.prototype._value = function() {
      return this._settledValue;
  };

  Promise.prototype._reason = function() {
      this._unsetRejectionIsUnhandled();
      return this._settledValue;
  };

  Promise.prototype.value = function() {
      var target = this._target();
      if (!target.isFulfilled()) {
          throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
      }
      return target._settledValue;
  };

  Promise.prototype.reason = function() {
      var target = this._target();
      if (!target.isRejected()) {
          throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
      }
      target._unsetRejectionIsUnhandled();
      return target._settledValue;
  };


  Promise.PromiseInspection = PromiseInspection;
  };

  var join =
  function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
  var util$$1 = util;
  var canEvaluate = util$$1.canEvaluate;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  var reject;

  {
  if (canEvaluate) {
      var thenCallback = function(i) {
          return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
      };

      var caller = function(count) {
          var values = [];
          for (var i = 1; i <= count; ++i) values.push("holder.p" + i);
          return new Function("holder", "                                      \n\
            'use strict';                                                    \n\
            var callback = holder.fn;                                        \n\
            return callback(values);                                         \n\
            ".replace(/values/g, values.join(", ")));
      };
      var thenCallbacks = [];
      var callers = [undefined];
      for (var i = 1; i <= 5; ++i) {
          thenCallbacks.push(thenCallback(i));
          callers.push(caller(i));
      }

      var Holder = function(total, fn) {
          this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
          this.fn = fn;
          this.total = total;
          this.now = 0;
      };

      Holder.prototype.callers = callers;
      Holder.prototype.checkFulfillment = function(promise) {
          var now = this.now;
          now++;
          var total = this.total;
          if (now >= total) {
              var handler = this.callers[total];
              promise._pushContext();
              var ret = tryCatch(handler)(this);
              promise._popContext();
              if (ret === errorObj) {
                  promise._rejectCallback(ret.e, false, true);
              } else {
                  promise._resolveCallback(ret);
              }
          } else {
              this.now = now;
          }
      };

      var reject = function (reason) {
          this._reject(reason);
      };
  }
  }

  Promise.join = function () {
      var last = arguments.length - 1;
      var fn;
      if (last > 0 && typeof arguments[last] === "function") {
          fn = arguments[last];
          {
              if (last < 6 && canEvaluate) {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  var holder = new Holder(last, fn);
                  var callbacks = thenCallbacks;
                  for (var i = 0; i < last; ++i) {
                      var maybePromise = tryConvertToPromise(arguments[i], ret);
                      if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          if (maybePromise._isPending()) {
                              maybePromise._then(callbacks[i], reject,
                                                 undefined, ret, holder);
                          } else if (maybePromise._isFulfilled()) {
                              callbacks[i].call(ret,
                                                maybePromise._value(), holder);
                          } else {
                              ret._reject(maybePromise._reason());
                          }
                      } else {
                          callbacks[i].call(ret, maybePromise, holder);
                      }
                  }
                  return ret;
              }
          }
      }
      var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}
      if (fn) args.pop();
      var ret = new PromiseArray(args).promise();
      return fn !== undefined ? ret.spread(fn) : ret;
  };

  };

  var map = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL) {
  var getDomain = Promise._getDomain;
  var async$$1 = async;
  var util$$1 = util;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  var PENDING = {};
  var EMPTY_ARRAY = [];

  function MappingPromiseArray(promises, fn, limit, _filter) {
      this.constructor$(promises);
      this._promise._captureStackTrace();
      var domain = getDomain();
      this._callback = domain === null ? fn : domain.bind(fn);
      this._preservedValues = _filter === INTERNAL
          ? new Array(this.length())
          : null;
      this._limit = limit;
      this._inFlight = 0;
      this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
      async$$1.invoke(init, this, undefined);
  }
  util$$1.inherits(MappingPromiseArray, PromiseArray);
  function init() {this._init$(undefined, -2);}

  MappingPromiseArray.prototype._init = function () {};

  MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var values = this._values;
      var length = this.length();
      var preservedValues = this._preservedValues;
      var limit = this._limit;
      if (values[index] === PENDING) {
          values[index] = value;
          if (limit >= 1) {
              this._inFlight--;
              this._drainQueue();
              if (this._isResolved()) return;
          }
      } else {
          if (limit >= 1 && this._inFlight >= limit) {
              values[index] = value;
              this._queue.push(index);
              return;
          }
          if (preservedValues !== null) preservedValues[index] = value;

          var callback = this._callback;
          var receiver = this._promise._boundValue();
          this._promise._pushContext();
          var ret = tryCatch(callback).call(receiver, value, index, length);
          this._promise._popContext();
          if (ret === errorObj) return this._reject(ret.e);

          var maybePromise = tryConvertToPromise(ret, this._promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              if (maybePromise._isPending()) {
                  if (limit >= 1) this._inFlight++;
                  values[index] = PENDING;
                  return maybePromise._proxyPromiseArray(this, index);
              } else if (maybePromise._isFulfilled()) {
                  ret = maybePromise._value();
              } else {
                  return this._reject(maybePromise._reason());
              }
          }
          values[index] = ret;
      }
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= length) {
          if (preservedValues !== null) {
              this._filter(values, preservedValues);
          } else {
              this._resolve(values);
          }

      }
  };

  MappingPromiseArray.prototype._drainQueue = function () {
      var queue = this._queue;
      var limit = this._limit;
      var values = this._values;
      while (queue.length > 0 && this._inFlight < limit) {
          if (this._isResolved()) return;
          var index = queue.pop();
          this._promiseFulfilled(values[index], index);
      }
  };

  MappingPromiseArray.prototype._filter = function (booleans, values) {
      var len = values.length;
      var ret = new Array(len);
      var j = 0;
      for (var i = 0; i < len; ++i) {
          if (booleans[i]) ret[j++] = values[i];
      }
      ret.length = j;
      this._resolve(ret);
  };

  MappingPromiseArray.prototype.preservedValues = function () {
      return this._preservedValues;
  };

  function map(promises, fn, options, _filter) {
      var limit = typeof options === "object" && options !== null
          ? options.concurrency
          : 0;
      limit = typeof limit === "number" &&
          isFinite(limit) && limit >= 1 ? limit : 0;
      return new MappingPromiseArray(promises, fn, limit, _filter);
  }

  Promise.prototype.map = function (fn, options) {
      if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");

      return map(this, fn, options, null).promise();
  };

  Promise.map = function (promises, fn, options, _filter) {
      if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      return map(promises, fn, options, _filter).promise();
  };


  };

  var cancel = function(Promise) {
  var errors$$1 = errors;
  var async$$1 = async;
  var CancellationError = errors$$1.CancellationError;

  Promise.prototype._cancel = function (reason) {
      if (!this.isCancellable()) return this;
      var parent;
      var promiseToReject = this;
      while ((parent = promiseToReject._cancellationParent) !== undefined &&
          parent.isCancellable()) {
          promiseToReject = parent;
      }
      this._unsetCancellable();
      promiseToReject._target()._rejectCallback(reason, false, true);
  };

  Promise.prototype.cancel = function (reason) {
      if (!this.isCancellable()) return this;
      if (reason === undefined) reason = new CancellationError();
      async$$1.invokeLater(this._cancel, this, reason);
      return this;
  };

  Promise.prototype.cancellable = function () {
      if (this._cancellable()) return this;
      async$$1.enableTrampoline();
      this._setCancellable();
      this._cancellationParent = undefined;
      return this;
  };

  Promise.prototype.uncancellable = function () {
      var ret = this.then();
      ret._unsetCancellable();
      return ret;
  };

  Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
      var ret = this._then(didFulfill, didReject, didProgress,
                           undefined, undefined);

      ret._setCancellable();
      ret._cancellationParent = undefined;
      return ret;
  };
  };

  var using = function (Promise, apiRejection, tryConvertToPromise,
      createContext) {
      var TypeError = errors.TypeError;
      var inherits = util.inherits;
      var PromiseInspection = Promise.PromiseInspection;

      function inspectionMapper(inspections) {
          var len = inspections.length;
          for (var i = 0; i < len; ++i) {
              var inspection = inspections[i];
              if (inspection.isRejected()) {
                  return Promise.reject(inspection.error());
              }
              inspections[i] = inspection._settledValue;
          }
          return inspections;
      }

      function thrower(e) {
          setTimeout(function(){throw e;}, 0);
      }

      function castPreservingDisposable(thenable) {
          var maybePromise = tryConvertToPromise(thenable);
          if (maybePromise !== thenable &&
              typeof thenable._isDisposable === "function" &&
              typeof thenable._getDisposer === "function" &&
              thenable._isDisposable()) {
              maybePromise._setDisposable(thenable._getDisposer());
          }
          return maybePromise;
      }
      function dispose(resources, inspection) {
          var i = 0;
          var len = resources.length;
          var ret = Promise.defer();
          function iterator() {
              if (i >= len) return ret.resolve();
              var maybePromise = castPreservingDisposable(resources[i++]);
              if (maybePromise instanceof Promise &&
                  maybePromise._isDisposable()) {
                  try {
                      maybePromise = tryConvertToPromise(
                          maybePromise._getDisposer().tryDispose(inspection),
                          resources.promise);
                  } catch (e) {
                      return thrower(e);
                  }
                  if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower,
                                                null, null, null);
                  }
              }
              iterator();
          }
          iterator();
          return ret.promise;
      }

      function disposerSuccess(value) {
          var inspection = new PromiseInspection();
          inspection._settledValue = value;
          inspection._bitField = 268435456;
          return dispose(this, inspection).thenReturn(value);
      }

      function disposerFail(reason) {
          var inspection = new PromiseInspection();
          inspection._settledValue = reason;
          inspection._bitField = 134217728;
          return dispose(this, inspection).thenThrow(reason);
      }

      function Disposer(data, promise, context) {
          this._data = data;
          this._promise = promise;
          this._context = context;
      }

      Disposer.prototype.data = function () {
          return this._data;
      };

      Disposer.prototype.promise = function () {
          return this._promise;
      };

      Disposer.prototype.resource = function () {
          if (this.promise().isFulfilled()) {
              return this.promise().value();
          }
          return null;
      };

      Disposer.prototype.tryDispose = function(inspection) {
          var resource = this.resource();
          var context = this._context;
          if (context !== undefined) context._pushContext();
          var ret = resource !== null
              ? this.doDispose(resource, inspection) : null;
          if (context !== undefined) context._popContext();
          this._promise._unsetDisposable();
          this._data = null;
          return ret;
      };

      Disposer.isDisposer = function (d) {
          return (d != null &&
                  typeof d.resource === "function" &&
                  typeof d.tryDispose === "function");
      };

      function FunctionDisposer(fn, promise, context) {
          this.constructor$(fn, promise, context);
      }
      inherits(FunctionDisposer, Disposer);

      FunctionDisposer.prototype.doDispose = function (resource, inspection) {
          var fn = this.data();
          return fn.call(resource, resource, inspection);
      };

      function maybeUnwrapDisposer(value) {
          if (Disposer.isDisposer(value)) {
              this.resources[this.index]._setDisposable(value);
              return value.promise();
          }
          return value;
      }

      Promise.using = function () {
          var len = arguments.length;
          if (len < 2) return apiRejection(
                          "you must pass at least 2 arguments to Promise.using");
          var fn = arguments[len - 1];
          if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");

          var input;
          var spreadArgs = true;
          if (len === 2 && Array.isArray(arguments[0])) {
              input = arguments[0];
              len = input.length;
              spreadArgs = false;
          } else {
              input = arguments;
              len--;
          }
          var resources = new Array(len);
          for (var i = 0; i < len; ++i) {
              var resource = input[i];
              if (Disposer.isDisposer(resource)) {
                  var disposer = resource;
                  resource = resource.promise();
                  resource._setDisposable(disposer);
              } else {
                  var maybePromise = tryConvertToPromise(resource);
                  if (maybePromise instanceof Promise) {
                      resource =
                          maybePromise._then(maybeUnwrapDisposer, null, null, {
                              resources: resources,
                              index: i
                      }, undefined);
                  }
              }
              resources[i] = resource;
          }

          var promise = Promise.settle(resources)
              .then(inspectionMapper)
              .then(function(vals) {
                  promise._pushContext();
                  var ret;
                  try {
                      ret = spreadArgs
                          ? fn.apply(undefined, vals) : fn.call(undefined,  vals);
                  } finally {
                      promise._popContext();
                  }
                  return ret;
              })
              ._then(
                  disposerSuccess, disposerFail, undefined, resources, undefined);
          resources.promise = promise;
          return promise;
      };

      Promise.prototype._setDisposable = function (disposer) {
          this._bitField = this._bitField | 262144;
          this._disposer = disposer;
      };

      Promise.prototype._isDisposable = function () {
          return (this._bitField & 262144) > 0;
      };

      Promise.prototype._getDisposer = function () {
          return this._disposer;
      };

      Promise.prototype._unsetDisposable = function () {
          this._bitField = this._bitField & (~262144);
          this._disposer = undefined;
      };

      Promise.prototype.disposer = function (fn) {
          if (typeof fn === "function") {
              return new FunctionDisposer(fn, this, createContext());
          }
          throw new TypeError();
      };

  };

  var generators = function(Promise,
                            apiRejection,
                            INTERNAL,
                            tryConvertToPromise) {
  var errors$$1 = errors;
  var TypeError = errors$$1.TypeError;
  var util$$1 = util;
  var errorObj = util$$1.errorObj;
  var tryCatch = util$$1.tryCatch;
  var yieldHandlers = [];

  function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
      for (var i = 0; i < yieldHandlers.length; ++i) {
          traceParent._pushContext();
          var result = tryCatch(yieldHandlers[i])(value);
          traceParent._popContext();
          if (result === errorObj) {
              traceParent._pushContext();
              var ret = Promise.reject(errorObj.e);
              traceParent._popContext();
              return ret;
          }
          var maybePromise = tryConvertToPromise(result, traceParent);
          if (maybePromise instanceof Promise) return maybePromise;
      }
      return null;
  }

  function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
      var promise = this._promise = new Promise(INTERNAL);
      promise._captureStackTrace();
      this._stack = stack;
      this._generatorFunction = generatorFunction;
      this._receiver = receiver;
      this._generator = undefined;
      this._yieldHandlers = typeof yieldHandler === "function"
          ? [yieldHandler].concat(yieldHandlers)
          : yieldHandlers;
  }

  PromiseSpawn.prototype.promise = function () {
      return this._promise;
  };

  PromiseSpawn.prototype._run = function () {
      this._generator = this._generatorFunction.call(this._receiver);
      this._receiver =
          this._generatorFunction = undefined;
      this._next(undefined);
  };

  PromiseSpawn.prototype._continue = function (result) {
      if (result === errorObj) {
          return this._promise._rejectCallback(result.e, false, true);
      }

      var value = result.value;
      if (result.done === true) {
          this._promise._resolveCallback(value);
      } else {
          var maybePromise = tryConvertToPromise(value, this._promise);
          if (!(maybePromise instanceof Promise)) {
              maybePromise =
                  promiseFromYieldHandler(maybePromise,
                                          this._yieldHandlers,
                                          this._promise);
              if (maybePromise === null) {
                  this._throw(
                      new TypeError(
                          "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/4Y4pDk\u000a\u000a".replace("%s", value) +
                          "From coroutine:\u000a" +
                          this._stack.split("\n").slice(1, -7).join("\n")
                      )
                  );
                  return;
              }
          }
          maybePromise._then(
              this._next,
              this._throw,
              undefined,
              this,
              null
         );
      }
  };

  PromiseSpawn.prototype._throw = function (reason) {
      this._promise._attachExtraTrace(reason);
      this._promise._pushContext();
      var result = tryCatch(this._generator["throw"])
          .call(this._generator, reason);
      this._promise._popContext();
      this._continue(result);
  };

  PromiseSpawn.prototype._next = function (value) {
      this._promise._pushContext();
      var result = tryCatch(this._generator.next).call(this._generator, value);
      this._promise._popContext();
      this._continue(result);
  };

  Promise.coroutine = function (generatorFunction, options) {
      if (typeof generatorFunction !== "function") {
          throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
      }
      var yieldHandler = Object(options).yieldHandler;
      var PromiseSpawn$ = PromiseSpawn;
      var stack = new Error().stack;
      return function () {
          var generator = generatorFunction.apply(this, arguments);
          var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                        stack);
          spawn._generator = generator;
          spawn._next(undefined);
          return spawn.promise();
      };
  };

  Promise.coroutine.addYieldHandler = function(fn) {
      if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      yieldHandlers.push(fn);
  };

  Promise.spawn = function (generatorFunction) {
      if (typeof generatorFunction !== "function") {
          return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
      }
      var spawn = new PromiseSpawn(generatorFunction, this);
      var ret = spawn.promise();
      spawn._run(Promise.spawn);
      return ret;
  };
  };

  var nodeify = function(Promise) {
  var util$$1 = util;
  var async$$1 = async;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;

  function spreadAdapter(val, nodeback) {
      var promise = this;
      if (!util$$1.isArray(val)) return successAdapter.call(promise, val, nodeback);
      var ret =
          tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
      if (ret === errorObj) {
          async$$1.throwLater(ret.e);
      }
  }

  function successAdapter(val, nodeback) {
      var promise = this;
      var receiver = promise._boundValue();
      var ret = val === undefined
          ? tryCatch(nodeback).call(receiver, null)
          : tryCatch(nodeback).call(receiver, null, val);
      if (ret === errorObj) {
          async$$1.throwLater(ret.e);
      }
  }
  function errorAdapter(reason, nodeback) {
      var promise = this;
      if (!reason) {
          var target = promise._target();
          var newReason = target._getCarriedStackTrace();
          newReason.cause = reason;
          reason = newReason;
      }
      var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
      if (ret === errorObj) {
          async$$1.throwLater(ret.e);
      }
  }

  Promise.prototype.asCallback =
  Promise.prototype.nodeify = function (nodeback, options) {
      if (typeof nodeback == "function") {
          var adapter = successAdapter;
          if (options !== undefined && Object(options).spread) {
              adapter = spreadAdapter;
          }
          this._then(
              adapter,
              errorAdapter,
              undefined,
              this,
              nodeback
          );
      }
      return this;
  };
  };

  var cr = Object.create;
  if (cr) {
      var callerCache = cr(null);
      var getterCache = cr(null);
      callerCache[" size"] = getterCache[" size"] = 0;
  }

  var call_get = function(Promise) {
  var util$$1 = util;
  var canEvaluate = util$$1.canEvaluate;
  var isIdentifier = util$$1.isIdentifier;

  var getMethodCaller;
  var getGetter;
  {
  var makeMethodCaller = function (methodName) {
      return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
  };

  var makeGetter = function (propertyName) {
      return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
  };

  var getCompiled = function(name, compiler, cache) {
      var ret = cache[name];
      if (typeof ret !== "function") {
          if (!isIdentifier(name)) {
              return null;
          }
          ret = compiler(name);
          cache[name] = ret;
          cache[" size"]++;
          if (cache[" size"] > 512) {
              var keys = Object.keys(cache);
              for (var i = 0; i < 256; ++i) delete cache[keys[i]];
              cache[" size"] = keys.length - 256;
          }
      }
      return ret;
  };

  getMethodCaller = function(name) {
      return getCompiled(name, makeMethodCaller, callerCache);
  };

  getGetter = function(name) {
      return getCompiled(name, makeGetter, getterCache);
  };
  }

  function ensureMethod(obj, methodName) {
      var fn;
      if (obj != null) fn = obj[methodName];
      if (typeof fn !== "function") {
          var message = "Object " + util$$1.classString(obj) + " has no method '" +
              util$$1.toString(methodName) + "'";
          throw new Promise.TypeError(message);
      }
      return fn;
  }

  function caller(obj) {
      var methodName = this.pop();
      var fn = ensureMethod(obj, methodName);
      return fn.apply(obj, this);
  }
  Promise.prototype.call = function (methodName) {
      var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
      {
          if (canEvaluate) {
              var maybeCaller = getMethodCaller(methodName);
              if (maybeCaller !== null) {
                  return this._then(
                      maybeCaller, undefined, undefined, args, undefined);
              }
          }
      }
      args.push(methodName);
      return this._then(caller, undefined, undefined, args, undefined);
  };

  function namedGetter(obj) {
      return obj[this];
  }
  function indexedGetter(obj) {
      var index = +this;
      if (index < 0) index = Math.max(0, index + obj.length);
      return obj[index];
  }
  Promise.prototype.get = function (propertyName) {
      var isIndex = (typeof propertyName === "number");
      var getter;
      if (!isIndex) {
          if (canEvaluate) {
              var maybeGetter = getGetter(propertyName);
              getter = maybeGetter !== null ? maybeGetter : namedGetter;
          } else {
              getter = namedGetter;
          }
      } else {
          getter = indexedGetter;
      }
      return this._then(getter, undefined, undefined, propertyName, undefined);
  };
  };

  var props = function(
      Promise, PromiseArray, tryConvertToPromise, apiRejection) {
  var util$$1 = util;
  var isObject = util$$1.isObject;
  var es5$$1 = es5;

  function PropertiesPromiseArray(obj) {
      var keys = es5$$1.keys(obj);
      var len = keys.length;
      var values = new Array(len * 2);
      for (var i = 0; i < len; ++i) {
          var key = keys[i];
          values[i] = obj[key];
          values[i + len] = key;
      }
      this.constructor$(values);
  }
  util$$1.inherits(PropertiesPromiseArray, PromiseArray);

  PropertiesPromiseArray.prototype._init = function () {
      this._init$(undefined, -3) ;
  };

  PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          var val = {};
          var keyOffset = this.length();
          for (var i = 0, len = this.length(); i < len; ++i) {
              val[this._values[i + keyOffset]] = this._values[i];
          }
          this._resolve(val);
      }
  };

  PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
      this._promise._progress({
          key: this._values[index + this.length()],
          value: value
      });
  };

  PropertiesPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };

  PropertiesPromiseArray.prototype.getActualLength = function (len) {
      return len >> 1;
  };

  function props(promises) {
      var ret;
      var castValue = tryConvertToPromise(promises);

      if (!isObject(castValue)) {
          return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/OsFKC8\u000a");
      } else if (castValue instanceof Promise) {
          ret = castValue._then(
              Promise.props, undefined, undefined, undefined, undefined);
      } else {
          ret = new PropertiesPromiseArray(castValue).promise();
      }

      if (castValue instanceof Promise) {
          ret._propagateFrom(castValue, 4);
      }
      return ret;
  }

  Promise.prototype.props = function () {
      return props(this);
  };

  Promise.props = function (promises) {
      return props(promises);
  };
  };

  var race = function(
      Promise, INTERNAL, tryConvertToPromise, apiRejection) {
  var isArray = util.isArray;

  var raceLater = function (promise) {
      return promise.then(function(array) {
          return race(array, promise);
      });
  };

  function race(promises, parent) {
      var maybePromise = tryConvertToPromise(promises);

      if (maybePromise instanceof Promise) {
          return raceLater(maybePromise);
      } else if (!isArray(promises)) {
          return apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
      }

      var ret = new Promise(INTERNAL);
      if (parent !== undefined) {
          ret._propagateFrom(parent, 4 | 1);
      }
      var fulfill = ret._fulfill;
      var reject = ret._reject;
      for (var i = 0, len = promises.length; i < len; ++i) {
          var val = promises[i];

          if (val === undefined && !(i in promises)) {
              continue;
          }

          Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
      }
      return ret;
  }

  Promise.race = function (promises) {
      return race(promises, undefined);
  };

  Promise.prototype.race = function () {
      return race(this, undefined);
  };

  };

  var reduce = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL) {
  var getDomain = Promise._getDomain;
  var async$$1 = async;
  var util$$1 = util;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  function ReductionPromiseArray(promises, fn, accum, _each) {
      this.constructor$(promises);
      this._promise._captureStackTrace();
      this._preservedValues = _each === INTERNAL ? [] : null;
      this._zerothIsAccum = (accum === undefined);
      this._gotAccum = false;
      this._reducingIndex = (this._zerothIsAccum ? 1 : 0);
      this._valuesPhase = undefined;
      var maybePromise = tryConvertToPromise(accum, this._promise);
      var rejected = false;
      var isPromise = maybePromise instanceof Promise;
      if (isPromise) {
          maybePromise = maybePromise._target();
          if (maybePromise._isPending()) {
              maybePromise._proxyPromiseArray(this, -1);
          } else if (maybePromise._isFulfilled()) {
              accum = maybePromise._value();
              this._gotAccum = true;
          } else {
              this._reject(maybePromise._reason());
              rejected = true;
          }
      }
      if (!(isPromise || this._zerothIsAccum)) this._gotAccum = true;
      var domain = getDomain();
      this._callback = domain === null ? fn : domain.bind(fn);
      this._accum = accum;
      if (!rejected) async$$1.invoke(init, this, undefined);
  }
  function init() {
      this._init$(undefined, -5);
  }
  util$$1.inherits(ReductionPromiseArray, PromiseArray);

  ReductionPromiseArray.prototype._init = function () {};

  ReductionPromiseArray.prototype._resolveEmptyArray = function () {
      if (this._gotAccum || this._zerothIsAccum) {
          this._resolve(this._preservedValues !== null
                          ? [] : this._accum);
      }
  };

  ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var values = this._values;
      values[index] = value;
      var length = this.length();
      var preservedValues = this._preservedValues;
      var isEach = preservedValues !== null;
      var gotAccum = this._gotAccum;
      var valuesPhase = this._valuesPhase;
      var valuesPhaseIndex;
      if (!valuesPhase) {
          valuesPhase = this._valuesPhase = new Array(length);
          for (valuesPhaseIndex=0; valuesPhaseIndex<length; ++valuesPhaseIndex) {
              valuesPhase[valuesPhaseIndex] = 0;
          }
      }
      valuesPhaseIndex = valuesPhase[index];

      if (index === 0 && this._zerothIsAccum) {
          this._accum = value;
          this._gotAccum = gotAccum = true;
          valuesPhase[index] = ((valuesPhaseIndex === 0)
              ? 1 : 2);
      } else if (index === -1) {
          this._accum = value;
          this._gotAccum = gotAccum = true;
      } else {
          if (valuesPhaseIndex === 0) {
              valuesPhase[index] = 1;
          } else {
              valuesPhase[index] = 2;
              this._accum = value;
          }
      }
      if (!gotAccum) return;

      var callback = this._callback;
      var receiver = this._promise._boundValue();
      var ret;

      for (var i = this._reducingIndex; i < length; ++i) {
          valuesPhaseIndex = valuesPhase[i];
          if (valuesPhaseIndex === 2) {
              this._reducingIndex = i + 1;
              continue;
          }
          if (valuesPhaseIndex !== 1) return;
          value = values[i];
          this._promise._pushContext();
          if (isEach) {
              preservedValues.push(value);
              ret = tryCatch(callback).call(receiver, value, i, length);
          }
          else {
              ret = tryCatch(callback)
                  .call(receiver, this._accum, value, i, length);
          }
          this._promise._popContext();

          if (ret === errorObj) return this._reject(ret.e);

          var maybePromise = tryConvertToPromise(ret, this._promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              if (maybePromise._isPending()) {
                  valuesPhase[i] = 4;
                  return maybePromise._proxyPromiseArray(this, i);
              } else if (maybePromise._isFulfilled()) {
                  ret = maybePromise._value();
              } else {
                  return this._reject(maybePromise._reason());
              }
          }

          this._reducingIndex = i + 1;
          this._accum = ret;
      }

      this._resolve(isEach ? preservedValues : this._accum);
  };

  function reduce(promises, fn, initialValue, _each) {
      if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
      return array.promise();
  }

  Promise.prototype.reduce = function (fn, initialValue) {
      return reduce(this, fn, initialValue, null);
  };

  Promise.reduce = function (promises, fn, initialValue, _each) {
      return reduce(promises, fn, initialValue, _each);
  };
  };

  var settle =
      function(Promise, PromiseArray) {
  var PromiseInspection = Promise.PromiseInspection;
  var util$$1 = util;

  function SettledPromiseArray(values) {
      this.constructor$(values);
  }
  util$$1.inherits(SettledPromiseArray, PromiseArray);

  SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
      this._values[index] = inspection;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
      }
  };

  SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var ret = new PromiseInspection();
      ret._bitField = 268435456;
      ret._settledValue = value;
      this._promiseResolved(index, ret);
  };
  SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
      var ret = new PromiseInspection();
      ret._bitField = 134217728;
      ret._settledValue = reason;
      this._promiseResolved(index, ret);
  };

  Promise.settle = function (promises) {
      return new SettledPromiseArray(promises).promise();
  };

  Promise.prototype.settle = function () {
      return new SettledPromiseArray(this).promise();
  };
  };

  var some =
  function(Promise, PromiseArray, apiRejection) {
  var util$$1 = util;
  var RangeError = errors.RangeError;
  var AggregateError = errors.AggregateError;
  var isArray = util$$1.isArray;


  function SomePromiseArray(values) {
      this.constructor$(values);
      this._howMany = 0;
      this._unwrap = false;
      this._initialized = false;
  }
  util$$1.inherits(SomePromiseArray, PromiseArray);

  SomePromiseArray.prototype._init = function () {
      if (!this._initialized) {
          return;
      }
      if (this._howMany === 0) {
          this._resolve([]);
          return;
      }
      this._init$(undefined, -5);
      var isArrayResolved = isArray(this._values);
      if (!this._isResolved() &&
          isArrayResolved &&
          this._howMany > this._canPossiblyFulfill()) {
          this._reject(this._getRangeError(this.length()));
      }
  };

  SomePromiseArray.prototype.init = function () {
      this._initialized = true;
      this._init();
  };

  SomePromiseArray.prototype.setUnwrap = function () {
      this._unwrap = true;
  };

  SomePromiseArray.prototype.howMany = function () {
      return this._howMany;
  };

  SomePromiseArray.prototype.setHowMany = function (count) {
      this._howMany = count;
  };

  SomePromiseArray.prototype._promiseFulfilled = function (value) {
      this._addFulfilled(value);
      if (this._fulfilled() === this.howMany()) {
          this._values.length = this.howMany();
          if (this.howMany() === 1 && this._unwrap) {
              this._resolve(this._values[0]);
          } else {
              this._resolve(this._values);
          }
      }

  };
  SomePromiseArray.prototype._promiseRejected = function (reason) {
      this._addRejected(reason);
      if (this.howMany() > this._canPossiblyFulfill()) {
          var e = new AggregateError();
          for (var i = this.length(); i < this._values.length; ++i) {
              e.push(this._values[i]);
          }
          this._reject(e);
      }
  };

  SomePromiseArray.prototype._fulfilled = function () {
      return this._totalResolved;
  };

  SomePromiseArray.prototype._rejected = function () {
      return this._values.length - this.length();
  };

  SomePromiseArray.prototype._addRejected = function (reason) {
      this._values.push(reason);
  };

  SomePromiseArray.prototype._addFulfilled = function (value) {
      this._values[this._totalResolved++] = value;
  };

  SomePromiseArray.prototype._canPossiblyFulfill = function () {
      return this.length() - this._rejected();
  };

  SomePromiseArray.prototype._getRangeError = function (count) {
      var message = "Input array must contain at least " +
              this._howMany + " items but contains only " + count + " items";
      return new RangeError(message);
  };

  SomePromiseArray.prototype._resolveEmptyArray = function () {
      this._reject(this._getRangeError(0));
  };

  function some(promises, howMany) {
      if ((howMany | 0) !== howMany || howMany < 0) {
          return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/1wAmHx\u000a");
      }
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(howMany);
      ret.init();
      return promise;
  }

  Promise.some = function (promises, howMany) {
      return some(promises, howMany);
  };

  Promise.prototype.some = function (howMany) {
      return some(this, howMany);
  };

  Promise._SomePromiseArray = SomePromiseArray;
  };

  var promisify = function(Promise, INTERNAL) {
  var THIS = {};
  var util$$1 = util;
  var nodebackForPromise = promise_resolver
      ._nodebackForPromise;
  var withAppended = util$$1.withAppended;
  var maybeWrapAsError = util$$1.maybeWrapAsError;
  var canEvaluate = util$$1.canEvaluate;
  var TypeError = errors.TypeError;
  var defaultSuffix = "Async";
  var defaultPromisified = {__isPromisified__: true};
  var noCopyProps = [
      "arity",    "length",
      "name",
      "arguments",
      "caller",
      "callee",
      "prototype",
      "__isPromisified__"
  ];
  var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

  var defaultFilter = function(name) {
      return util$$1.isIdentifier(name) &&
          name.charAt(0) !== "_" &&
          name !== "constructor";
  };

  function propsFilter(key) {
      return !noCopyPropsPattern.test(key);
  }

  function isPromisified(fn) {
      try {
          return fn.__isPromisified__ === true;
      }
      catch (e) {
          return false;
      }
  }

  function hasPromisified(obj, key, suffix) {
      var val = util$$1.getDataPropertyOrDefault(obj, key + suffix,
                                              defaultPromisified);
      return val ? isPromisified(val) : false;
  }
  function checkValid(ret, suffix, suffixRegexp) {
      for (var i = 0; i < ret.length; i += 2) {
          var key = ret[i];
          if (suffixRegexp.test(key)) {
              var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
              for (var j = 0; j < ret.length; j += 2) {
                  if (ret[j] === keyWithoutAsyncSuffix) {
                      throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/iWrZbw\u000a"
                          .replace("%s", suffix));
                  }
              }
          }
      }
  }

  function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
      var keys = util$$1.inheritedDataKeys(obj);
      var ret = [];
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var value = obj[key];
          var passesDefaultFilter = filter === defaultFilter
              ? true : defaultFilter(key, value, obj);
          if (typeof value === "function" &&
              !isPromisified(value) &&
              !hasPromisified(obj, key, suffix) &&
              filter(key, value, obj, passesDefaultFilter)) {
              ret.push(key, value);
          }
      }
      checkValid(ret, suffix, suffixRegexp);
      return ret;
  }

  var escapeIdentRegex = function(str) {
      return str.replace(/([$])/, "\\$");
  };

  var makeNodePromisifiedEval;
  {
  var switchCaseArgumentOrder = function(likelyArgumentCount) {
      var ret = [likelyArgumentCount];
      var min = Math.max(0, likelyArgumentCount - 1 - 3);
      for(var i = likelyArgumentCount - 1; i >= min; --i) {
          ret.push(i);
      }
      for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
          ret.push(i);
      }
      return ret;
  };

  var argumentSequence = function(argumentCount) {
      return util$$1.filledRange(argumentCount, "_arg", "");
  };

  var parameterDeclaration = function(parameterCount) {
      return util$$1.filledRange(
          Math.max(parameterCount, 3), "_arg", "");
  };

  var parameterCount = function(fn) {
      if (typeof fn.length === "number") {
          return Math.max(Math.min(fn.length, 1023 + 1), 0);
      }
      return 0;
  };

  makeNodePromisifiedEval =
  function(callback, receiver, originalName, fn) {
      var newParameterCount = Math.max(0, parameterCount(fn) - 1);
      var argumentOrder = switchCaseArgumentOrder(newParameterCount);
      var shouldProxyThis = typeof callback === "string" || receiver === THIS;

      function generateCallForArgumentCount(count) {
          var args = argumentSequence(count).join(", ");
          var comma = count > 0 ? ", " : "";
          var ret;
          if (shouldProxyThis) {
              ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
          } else {
              ret = receiver === undefined
                  ? "ret = callback({{args}}, nodeback); break;\n"
                  : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
          }
          return ret.replace("{{args}}", args).replace(", ", comma);
      }

      function generateArgumentSwitchCase() {
          var ret = "";
          for (var i = 0; i < argumentOrder.length; ++i) {
              ret += "case " + argumentOrder[i] +":" +
                  generateCallForArgumentCount(argumentOrder[i]);
          }

          ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                  ? "ret = callback.apply(this, args);\n"
                                  : "ret = callback.apply(receiver, args);\n"));
          return ret;
      }

      var getFunctionCode = typeof callback === "string"
                                  ? ("this != null ? this['"+callback+"'] : fn")
                                  : "fn";

      return new Function("Promise",
                          "fn",
                          "receiver",
                          "withAppended",
                          "maybeWrapAsError",
                          "nodebackForPromise",
                          "tryCatch",
                          "errorObj",
                          "notEnumerableProp",
                          "INTERNAL","'use strict';                            \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise);                      \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
        "
          .replace("Parameters", parameterDeclaration(newParameterCount))
          .replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
          .replace("[GetFunctionCode]", getFunctionCode))(
              Promise,
              fn,
              receiver,
              withAppended,
              maybeWrapAsError,
              nodebackForPromise,
              util$$1.tryCatch,
              util$$1.errorObj,
              util$$1.notEnumerableProp,
              INTERNAL
          );
  };
  }

  function makeNodePromisifiedClosure(callback, receiver, _, fn) {
      var defaultThis = (function() {return this;})();
      var method = callback;
      if (typeof method === "string") {
          callback = fn;
      }
      function promisified() {
          var _receiver = receiver;
          if (receiver === THIS) _receiver = this;
          var promise = new Promise(INTERNAL);
          promise._captureStackTrace();
          var cb = typeof method === "string" && this !== defaultThis
              ? this[method] : callback;
          var fn = nodebackForPromise(promise);
          try {
              cb.apply(_receiver, withAppended(arguments, fn));
          } catch(e) {
              promise._rejectCallback(maybeWrapAsError(e), true, true);
          }
          return promise;
      }
      util$$1.notEnumerableProp(promisified, "__isPromisified__", true);
      return promisified;
  }

  var makeNodePromisified = canEvaluate
      ? makeNodePromisifiedEval
      : makeNodePromisifiedClosure;

  function promisifyAll(obj, suffix, filter, promisifier) {
      var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
      var methods =
          promisifiableMethods(obj, suffix, suffixRegexp, filter);

      for (var i = 0, len = methods.length; i < len; i+= 2) {
          var key = methods[i];
          var fn = methods[i+1];
          var promisifiedKey = key + suffix;
          if (promisifier === makeNodePromisified) {
              obj[promisifiedKey] =
                  makeNodePromisified(key, THIS, key, fn, suffix);
          } else {
              var promisified = promisifier(fn, function() {
                  return makeNodePromisified(key, THIS, key, fn, suffix);
              });
              util$$1.notEnumerableProp(promisified, "__isPromisified__", true);
              obj[promisifiedKey] = promisified;
          }
      }
      util$$1.toFastProperties(obj);
      return obj;
  }

  function promisify(callback, receiver) {
      return makeNodePromisified(callback, receiver, undefined, callback);
  }

  Promise.promisify = function (fn, receiver) {
      if (typeof fn !== "function") {
          throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      }
      if (isPromisified(fn)) {
          return fn;
      }
      var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
      util$$1.copyDescriptors(fn, ret, propsFilter);
      return ret;
  };

  Promise.promisifyAll = function (target, options) {
      if (typeof target !== "function" && typeof target !== "object") {
          throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/9ITlV0\u000a");
      }
      options = Object(options);
      var suffix = options.suffix;
      if (typeof suffix !== "string") suffix = defaultSuffix;
      var filter = options.filter;
      if (typeof filter !== "function") filter = defaultFilter;
      var promisifier = options.promisifier;
      if (typeof promisifier !== "function") promisifier = makeNodePromisified;

      if (!util$$1.isIdentifier(suffix)) {
          throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/8FZo5V\u000a");
      }

      var keys = util$$1.inheritedDataKeys(target);
      for (var i = 0; i < keys.length; ++i) {
          var value = target[keys[i]];
          if (keys[i] !== "constructor" &&
              util$$1.isClass(value)) {
              promisifyAll(value.prototype, suffix, filter, promisifier);
              promisifyAll(value, suffix, filter, promisifier);
          }
      }

      return promisifyAll(target, suffix, filter, promisifier);
  };
  };

  var any = function(Promise) {
  var SomePromiseArray = Promise._SomePromiseArray;
  function any(promises) {
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(1);
      ret.setUnwrap();
      ret.init();
      return promise;
  }

  Promise.any = function (promises) {
      return any(promises);
  };

  Promise.prototype.any = function () {
      return any(this);
  };

  };

  var each = function(Promise, INTERNAL) {
  var PromiseReduce = Promise.reduce;

  Promise.prototype.each = function (fn) {
      return PromiseReduce(this, fn, null, INTERNAL);
  };

  Promise.each = function (promises, fn) {
      return PromiseReduce(promises, fn, null, INTERNAL);
  };
  };

  var timers = function(Promise, INTERNAL) {
  var util$$1 = util;
  var TimeoutError = Promise.TimeoutError;

  var afterTimeout = function (promise, message) {
      if (!promise.isPending()) return;
      
      var err;
      if(!util$$1.isPrimitive(message) && (message instanceof Error)) {
          err = message;
      } else {
          if (typeof message !== "string") {
              message = "operation timed out";
          }
          err = new TimeoutError(message);
      }
      util$$1.markAsOriginatingFromRejection(err);
      promise._attachExtraTrace(err);
      promise._cancel(err);
  };

  var afterValue = function(value) { return delay(+this).thenReturn(value); };
  var delay = Promise.delay = function (value, ms) {
      if (ms === undefined) {
          ms = value;
          value = undefined;
          var ret = new Promise(INTERNAL);
          setTimeout(function() { ret._fulfill(); }, ms);
          return ret;
      }
      ms = +ms;
      return Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
  };

  Promise.prototype.delay = function (ms) {
      return delay(this, ms);
  };

  function successClear(value) {
      var handle = this;
      if (handle instanceof Number) handle = +handle;
      clearTimeout(handle);
      return value;
  }

  function failureClear(reason) {
      var handle = this;
      if (handle instanceof Number) handle = +handle;
      clearTimeout(handle);
      throw reason;
  }

  Promise.prototype.timeout = function (ms, message) {
      ms = +ms;
      var ret = this.then().cancellable();
      ret._cancellationParent = this;
      var handle = setTimeout(function timeoutTimeout() {
          afterTimeout(ret, message);
      }, ms);
      return ret._then(successClear, failureClear, undefined, handle, undefined);
  };

  };

  var filter = function(Promise, INTERNAL) {
  var PromiseMap = Promise.map;

  Promise.prototype.filter = function (fn, options) {
      return PromiseMap(this, fn, options, INTERNAL);
  };

  Promise.filter = function (promises, fn, options) {
      return PromiseMap(promises, fn, options, INTERNAL);
  };
  };

  var promise = createCommonjsModule(function (module) {
  module.exports = function() {
  var makeSelfResolutionError = function () {
      return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/LhFpo0\u000a");
  };
  var reflect = function() {
      return new Promise.PromiseInspection(this._target());
  };
  var apiRejection = function(msg) {
      return Promise.reject(new TypeError(msg));
  };

  var util$$1 = util;

  var getDomain;
  if (util$$1.isNode) {
      getDomain = function() {
          var ret = process.domain;
          if (ret === undefined) ret = null;
          return ret;
      };
  } else {
      getDomain = function() {
          return null;
      };
  }
  util$$1.notEnumerableProp(Promise, "_getDomain", getDomain);

  var UNDEFINED_BINDING = {};
  var async$$1 = async;
  var errors$$1 = errors;
  var TypeError = Promise.TypeError = errors$$1.TypeError;
  Promise.RangeError = errors$$1.RangeError;
  Promise.CancellationError = errors$$1.CancellationError;
  Promise.TimeoutError = errors$$1.TimeoutError;
  Promise.OperationalError = errors$$1.OperationalError;
  Promise.RejectionError = errors$$1.OperationalError;
  Promise.AggregateError = errors$$1.AggregateError;
  var INTERNAL = function(){};
  var APPLY = {};
  var NEXT_FILTER = {e: null};
  var tryConvertToPromise = thenables(Promise, INTERNAL);
  var PromiseArray =
      promise_array(Promise, INTERNAL,
                                      tryConvertToPromise, apiRejection);
  var CapturedTrace = captured_trace();
  var isDebugging = debuggability(Promise, CapturedTrace);
   /*jshint unused:false*/
  var createContext =
      context(Promise, CapturedTrace, isDebugging);
  var CatchFilter = catch_filter(NEXT_FILTER);
  var PromiseResolver = promise_resolver;
  var nodebackForPromise = PromiseResolver._nodebackForPromise;
  var errorObj = util$$1.errorObj;
  var tryCatch = util$$1.tryCatch;

  function Promise(resolver) {
      if (typeof resolver !== "function") {
          throw new TypeError("the promise constructor requires a resolver function\u000a\u000a    See http://goo.gl/EC22Yn\u000a");
      }
      if (this.constructor !== Promise) {
          throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/KsIlge\u000a");
      }
      this._bitField = 0;
      this._fulfillmentHandler0 = undefined;
      this._rejectionHandler0 = undefined;
      this._progressHandler0 = undefined;
      this._promise0 = undefined;
      this._receiver0 = undefined;
      this._settledValue = undefined;
      if (resolver !== INTERNAL) this._resolveFromResolver(resolver);
  }

  Promise.prototype.toString = function () {
      return "[object Promise]";
  };

  Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
      var len = arguments.length;
      if (len > 1) {
          var catchInstances = new Array(len - 1),
              j = 0, i;
          for (i = 0; i < len - 1; ++i) {
              var item = arguments[i];
              if (typeof item === "function") {
                  catchInstances[j++] = item;
              } else {
                  return Promise.reject(
                      new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a"));
              }
          }
          catchInstances.length = j;
          fn = arguments[i];
          var catchFilter = new CatchFilter(catchInstances, fn, this);
          return this._then(undefined, catchFilter.doFilter, undefined,
              catchFilter, undefined);
      }
      return this._then(undefined, fn, undefined, undefined, undefined);
  };

  Promise.prototype.reflect = function () {
      return this._then(reflect, reflect, undefined, this, undefined);
  };

  Promise.prototype.then = function (didFulfill, didReject, didProgress) {
      if (isDebugging() && arguments.length > 0 &&
          typeof didFulfill !== "function" &&
          typeof didReject !== "function") {
          var msg = ".then() only accepts functions but was passed: " +
                  util$$1.classString(didFulfill);
          if (arguments.length > 1) {
              msg += ", " + util$$1.classString(didReject);
          }
          this._warn(msg);
      }
      return this._then(didFulfill, didReject, didProgress,
          undefined, undefined);
  };

  Promise.prototype.done = function (didFulfill, didReject, didProgress) {
      var promise = this._then(didFulfill, didReject, didProgress,
          undefined, undefined);
      promise._setIsFinal();
  };

  Promise.prototype.spread = function (didFulfill, didReject) {
      return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined);
  };

  Promise.prototype.isCancellable = function () {
      return !this.isResolved() &&
          this._cancellable();
  };

  Promise.prototype.toJSON = function () {
      var ret = {
          isFulfilled: false,
          isRejected: false,
          fulfillmentValue: undefined,
          rejectionReason: undefined
      };
      if (this.isFulfilled()) {
          ret.fulfillmentValue = this.value();
          ret.isFulfilled = true;
      } else if (this.isRejected()) {
          ret.rejectionReason = this.reason();
          ret.isRejected = true;
      }
      return ret;
  };

  Promise.prototype.all = function () {
      return new PromiseArray(this).promise();
  };

  Promise.prototype.error = function (fn) {
      return this.caught(util$$1.originatesFromRejection, fn);
  };

  Promise.getNewLibraryCopy = module.exports;

  Promise.is = function (val) {
      return val instanceof Promise;
  };

  Promise.fromNode = function(fn) {
      var ret = new Promise(INTERNAL);
      var result = tryCatch(fn)(nodebackForPromise(ret));
      if (result === errorObj) {
          ret._rejectCallback(result.e, true, true);
      }
      return ret;
  };

  Promise.all = function (promises) {
      return new PromiseArray(promises).promise();
  };

  Promise.defer = Promise.pending = function () {
      var promise = new Promise(INTERNAL);
      return new PromiseResolver(promise);
  };

  Promise.cast = function (obj) {
      var ret = tryConvertToPromise(obj);
      if (!(ret instanceof Promise)) {
          var val = ret;
          ret = new Promise(INTERNAL);
          ret._fulfillUnchecked(val);
      }
      return ret;
  };

  Promise.resolve = Promise.fulfilled = Promise.cast;

  Promise.reject = Promise.rejected = function (reason) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._rejectCallback(reason, true);
      return ret;
  };

  Promise.setScheduler = function(fn) {
      if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      var prev = async$$1._schedule;
      async$$1._schedule = fn;
      return prev;
  };

  Promise.prototype._then = function (
      didFulfill,
      didReject,
      didProgress,
      receiver,
      internalData
  ) {
      var haveInternalData = internalData !== undefined;
      var ret = haveInternalData ? internalData : new Promise(INTERNAL);

      if (!haveInternalData) {
          ret._propagateFrom(this, 4 | 1);
          ret._captureStackTrace();
      }

      var target = this._target();
      if (target !== this) {
          if (receiver === undefined) receiver = this._boundTo;
          if (!haveInternalData) ret._setIsMigrated();
      }

      var callbackIndex = target._addCallbacks(didFulfill,
                                               didReject,
                                               didProgress,
                                               ret,
                                               receiver,
                                               getDomain());

      if (target._isResolved() && !target._isSettlePromisesQueued()) {
          async$$1.invoke(
              target._settlePromiseAtPostResolution, target, callbackIndex);
      }

      return ret;
  };

  Promise.prototype._settlePromiseAtPostResolution = function (index) {
      if (this._isRejectionUnhandled()) this._unsetRejectionIsUnhandled();
      this._settlePromiseAt(index);
  };

  Promise.prototype._length = function () {
      return this._bitField & 131071;
  };

  Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
      return (this._bitField & 939524096) > 0;
  };

  Promise.prototype._isFollowing = function () {
      return (this._bitField & 536870912) === 536870912;
  };

  Promise.prototype._setLength = function (len) {
      this._bitField = (this._bitField & -131072) |
          (len & 131071);
  };

  Promise.prototype._setFulfilled = function () {
      this._bitField = this._bitField | 268435456;
  };

  Promise.prototype._setRejected = function () {
      this._bitField = this._bitField | 134217728;
  };

  Promise.prototype._setFollowing = function () {
      this._bitField = this._bitField | 536870912;
  };

  Promise.prototype._setIsFinal = function () {
      this._bitField = this._bitField | 33554432;
  };

  Promise.prototype._isFinal = function () {
      return (this._bitField & 33554432) > 0;
  };

  Promise.prototype._cancellable = function () {
      return (this._bitField & 67108864) > 0;
  };

  Promise.prototype._setCancellable = function () {
      this._bitField = this._bitField | 67108864;
  };

  Promise.prototype._unsetCancellable = function () {
      this._bitField = this._bitField & (~67108864);
  };

  Promise.prototype._setIsMigrated = function () {
      this._bitField = this._bitField | 4194304;
  };

  Promise.prototype._unsetIsMigrated = function () {
      this._bitField = this._bitField & (~4194304);
  };

  Promise.prototype._isMigrated = function () {
      return (this._bitField & 4194304) > 0;
  };

  Promise.prototype._receiverAt = function (index) {
      var ret = index === 0
          ? this._receiver0
          : this[
              index * 5 - 5 + 4];
      if (ret === UNDEFINED_BINDING) {
          return undefined;
      } else if (ret === undefined && this._isBound()) {
          return this._boundValue();
      }
      return ret;
  };

  Promise.prototype._promiseAt = function (index) {
      return index === 0
          ? this._promise0
          : this[index * 5 - 5 + 3];
  };

  Promise.prototype._fulfillmentHandlerAt = function (index) {
      return index === 0
          ? this._fulfillmentHandler0
          : this[index * 5 - 5 + 0];
  };

  Promise.prototype._rejectionHandlerAt = function (index) {
      return index === 0
          ? this._rejectionHandler0
          : this[index * 5 - 5 + 1];
  };

  Promise.prototype._boundValue = function() {
      var ret = this._boundTo;
      if (ret !== undefined) {
          if (ret instanceof Promise) {
              if (ret.isFulfilled()) {
                  return ret.value();
              } else {
                  return undefined;
              }
          }
      }
      return ret;
  };

  Promise.prototype._migrateCallbacks = function (follower, index) {
      var fulfill = follower._fulfillmentHandlerAt(index);
      var reject = follower._rejectionHandlerAt(index);
      var progress$$1 = follower._progressHandlerAt(index);
      var promise = follower._promiseAt(index);
      var receiver = follower._receiverAt(index);
      if (promise instanceof Promise) promise._setIsMigrated();
      if (receiver === undefined) receiver = UNDEFINED_BINDING;
      this._addCallbacks(fulfill, reject, progress$$1, promise, receiver, null);
  };

  Promise.prototype._addCallbacks = function (
      fulfill,
      reject,
      progress$$1,
      promise,
      receiver,
      domain
  ) {
      var index = this._length();

      if (index >= 131071 - 5) {
          index = 0;
          this._setLength(0);
      }

      if (index === 0) {
          this._promise0 = promise;
          if (receiver !== undefined) this._receiver0 = receiver;
          if (typeof fulfill === "function" && !this._isCarryingStackTrace()) {
              this._fulfillmentHandler0 =
                  domain === null ? fulfill : domain.bind(fulfill);
          }
          if (typeof reject === "function") {
              this._rejectionHandler0 =
                  domain === null ? reject : domain.bind(reject);
          }
          if (typeof progress$$1 === "function") {
              this._progressHandler0 =
                  domain === null ? progress$$1 : domain.bind(progress$$1);
          }
      } else {
          var base = index * 5 - 5;
          this[base + 3] = promise;
          this[base + 4] = receiver;
          if (typeof fulfill === "function") {
              this[base + 0] =
                  domain === null ? fulfill : domain.bind(fulfill);
          }
          if (typeof reject === "function") {
              this[base + 1] =
                  domain === null ? reject : domain.bind(reject);
          }
          if (typeof progress$$1 === "function") {
              this[base + 2] =
                  domain === null ? progress$$1 : domain.bind(progress$$1);
          }
      }
      this._setLength(index + 1);
      return index;
  };

  Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
      var index = this._length();

      if (index >= 131071 - 5) {
          index = 0;
          this._setLength(0);
      }
      if (index === 0) {
          this._promise0 = promiseSlotValue;
          this._receiver0 = receiver;
      } else {
          var base = index * 5 - 5;
          this[base + 3] = promiseSlotValue;
          this[base + 4] = receiver;
      }
      this._setLength(index + 1);
  };

  Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
      this._setProxyHandlers(promiseArray, index);
  };

  Promise.prototype._resolveCallback = function(value, shouldBind) {
      if (this._isFollowingOrFulfilledOrRejected()) return;
      if (value === this)
          return this._rejectCallback(makeSelfResolutionError(), false, true);
      var maybePromise = tryConvertToPromise(value, this);
      if (!(maybePromise instanceof Promise)) return this._fulfill(value);

      var propagationFlags = 1 | (shouldBind ? 4 : 0);
      this._propagateFrom(maybePromise, propagationFlags);
      var promise = maybePromise._target();
      if (promise._isPending()) {
          var len = this._length();
          for (var i = 0; i < len; ++i) {
              promise._migrateCallbacks(this, i);
          }
          this._setFollowing();
          this._setLength(0);
          this._setFollowee(promise);
      } else if (promise._isFulfilled()) {
          this._fulfillUnchecked(promise._value());
      } else {
          this._rejectUnchecked(promise._reason(),
              promise._getCarriedStackTrace());
      }
  };

  Promise.prototype._rejectCallback =
  function(reason, synchronous, shouldNotMarkOriginatingFromRejection) {
      if (!shouldNotMarkOriginatingFromRejection) {
          util$$1.markAsOriginatingFromRejection(reason);
      }
      var trace = util$$1.ensureErrorObject(reason);
      var hasStack = trace === reason;
      this._attachExtraTrace(trace, synchronous ? hasStack : false);
      this._reject(reason, hasStack ? undefined : trace);
  };

  Promise.prototype._resolveFromResolver = function (resolver) {
      var promise = this;
      this._captureStackTrace();
      this._pushContext();
      var synchronous = true;
      var r = tryCatch(resolver)(function(value) {
          if (promise === null) return;
          promise._resolveCallback(value);
          promise = null;
      }, function (reason) {
          if (promise === null) return;
          promise._rejectCallback(reason, synchronous);
          promise = null;
      });
      synchronous = false;
      this._popContext();

      if (r !== undefined && r === errorObj && promise !== null) {
          promise._rejectCallback(r.e, true, true);
          promise = null;
      }
  };

  Promise.prototype._settlePromiseFromHandler = function (
      handler, receiver, value, promise
  ) {
      if (promise._isRejected()) return;
      promise._pushContext();
      var x;
      if (receiver === APPLY && !this._isRejected()) {
          x = tryCatch(handler).apply(this._boundValue(), value);
      } else {
          x = tryCatch(handler).call(receiver, value);
      }
      promise._popContext();

      if (x === errorObj || x === promise || x === NEXT_FILTER) {
          var err = x === promise ? makeSelfResolutionError() : x.e;
          promise._rejectCallback(err, false, true);
      } else {
          promise._resolveCallback(x);
      }
  };

  Promise.prototype._target = function() {
      var ret = this;
      while (ret._isFollowing()) ret = ret._followee();
      return ret;
  };

  Promise.prototype._followee = function() {
      return this._rejectionHandler0;
  };

  Promise.prototype._setFollowee = function(promise) {
      this._rejectionHandler0 = promise;
  };

  Promise.prototype._cleanValues = function () {
      if (this._cancellable()) {
          this._cancellationParent = undefined;
      }
  };

  Promise.prototype._propagateFrom = function (parent, flags) {
      if ((flags & 1) > 0 && parent._cancellable()) {
          this._setCancellable();
          this._cancellationParent = parent;
      }
      if ((flags & 4) > 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  };

  Promise.prototype._fulfill = function (value) {
      if (this._isFollowingOrFulfilledOrRejected()) return;
      this._fulfillUnchecked(value);
  };

  Promise.prototype._reject = function (reason, carriedStackTrace) {
      if (this._isFollowingOrFulfilledOrRejected()) return;
      this._rejectUnchecked(reason, carriedStackTrace);
  };

  Promise.prototype._settlePromiseAt = function (index) {
      var promise = this._promiseAt(index);
      var isPromise = promise instanceof Promise;

      if (isPromise && promise._isMigrated()) {
          promise._unsetIsMigrated();
          return async$$1.invoke(this._settlePromiseAt, this, index);
      }
      var handler = this._isFulfilled()
          ? this._fulfillmentHandlerAt(index)
          : this._rejectionHandlerAt(index);

      var carriedStackTrace =
          this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
      var value = this._settledValue;
      var receiver = this._receiverAt(index);
      this._clearCallbackDataAtIndex(index);

      if (typeof handler === "function") {
          if (!isPromise) {
              handler.call(receiver, value, promise);
          } else {
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (receiver instanceof PromiseArray) {
          if (!receiver._isResolved()) {
              if (this._isFulfilled()) {
                  receiver._promiseFulfilled(value, promise);
              }
              else {
                  receiver._promiseRejected(value, promise);
              }
          }
      } else if (isPromise) {
          if (this._isFulfilled()) {
              promise._fulfill(value);
          } else {
              promise._reject(value, carriedStackTrace);
          }
      }

      if (index >= 4 && (index & 31) === 4)
          async$$1.invokeLater(this._setLength, this, 0);
  };

  Promise.prototype._clearCallbackDataAtIndex = function(index) {
      if (index === 0) {
          if (!this._isCarryingStackTrace()) {
              this._fulfillmentHandler0 = undefined;
          }
          this._rejectionHandler0 =
          this._progressHandler0 =
          this._receiver0 =
          this._promise0 = undefined;
      } else {
          var base = index * 5 - 5;
          this[base + 3] =
          this[base + 4] =
          this[base + 0] =
          this[base + 1] =
          this[base + 2] = undefined;
      }
  };

  Promise.prototype._isSettlePromisesQueued = function () {
      return (this._bitField &
              -1073741824) === -1073741824;
  };

  Promise.prototype._setSettlePromisesQueued = function () {
      this._bitField = this._bitField | -1073741824;
  };

  Promise.prototype._unsetSettlePromisesQueued = function () {
      this._bitField = this._bitField & (~-1073741824);
  };

  Promise.prototype._queueSettlePromises = function() {
      async$$1.settlePromises(this);
      this._setSettlePromisesQueued();
  };

  Promise.prototype._fulfillUnchecked = function (value) {
      if (value === this) {
          var err = makeSelfResolutionError();
          this._attachExtraTrace(err);
          return this._rejectUnchecked(err, undefined);
      }
      this._setFulfilled();
      this._settledValue = value;
      this._cleanValues();

      if (this._length() > 0) {
          this._queueSettlePromises();
      }
  };

  Promise.prototype._rejectUncheckedCheckError = function (reason) {
      var trace = util$$1.ensureErrorObject(reason);
      this._rejectUnchecked(reason, trace === reason ? undefined : trace);
  };

  Promise.prototype._rejectUnchecked = function (reason, trace) {
      if (reason === this) {
          var err = makeSelfResolutionError();
          this._attachExtraTrace(err);
          return this._rejectUnchecked(err);
      }
      this._setRejected();
      this._settledValue = reason;
      this._cleanValues();

      if (this._isFinal()) {
          async$$1.throwLater(function(e) {
              if ("stack" in e) {
                  async$$1.invokeFirst(
                      CapturedTrace.unhandledRejection, undefined, e);
              }
              throw e;
          }, trace === undefined ? reason : trace);
          return;
      }

      if (trace !== undefined && trace !== reason) {
          this._setCarriedStackTrace(trace);
      }

      if (this._length() > 0) {
          this._queueSettlePromises();
      } else {
          this._ensurePossibleRejectionHandled();
      }
  };

  Promise.prototype._settlePromises = function () {
      this._unsetSettlePromisesQueued();
      var len = this._length();
      for (var i = 0; i < len; i++) {
          this._settlePromiseAt(i);
      }
  };


  util$$1.notEnumerableProp(Promise,
                         "_makeSelfResolutionError",
                         makeSelfResolutionError);

  progress(Promise, PromiseArray);
  method(Promise, INTERNAL, tryConvertToPromise, apiRejection);
  bind(Promise, INTERNAL, tryConvertToPromise);
  _finally(Promise, NEXT_FILTER, tryConvertToPromise);
  direct_resolve(Promise);
  synchronous_inspection(Promise);
  join(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
  Promise.version = "2.11.0";
  Promise.Promise = Promise;
  map(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
  cancel(Promise);
  using(Promise, apiRejection, tryConvertToPromise, createContext);
  generators(Promise, apiRejection, INTERNAL, tryConvertToPromise);
  nodeify(Promise);
  call_get(Promise);
  props(Promise, PromiseArray, tryConvertToPromise, apiRejection);
  race(Promise, INTERNAL, tryConvertToPromise, apiRejection);
  reduce(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
  settle(Promise, PromiseArray);
  some(Promise, PromiseArray, apiRejection);
  promisify(Promise, INTERNAL);
  any(Promise);
  each(Promise, INTERNAL);
  timers(Promise, INTERNAL);
  filter(Promise, INTERNAL);
                                                           
      util$$1.toFastProperties(Promise);                                          
      util$$1.toFastProperties(Promise.prototype);                                
      function fillTypes(value) {                                              
          var p = new Promise(INTERNAL);                                       
          p._fulfillmentHandler0 = value;                                      
          p._rejectionHandler0 = value;                                        
          p._progressHandler0 = value;                                         
          p._promise0 = value;                                                 
          p._receiver0 = value;                                                
          p._settledValue = value;                                             
      }                                                                        
      // Complete slack tracking, opt out of field-type tracking and           
      // stabilize map                                                         
      fillTypes({a: 1});                                                       
      fillTypes({b: 2});                                                       
      fillTypes({c: 3});                                                       
      fillTypes(1);                                                            
      fillTypes(function(){});                                                 
      fillTypes(undefined);                                                    
      fillTypes(false);                                                        
      fillTypes(new Promise(INTERNAL));                                        
      CapturedTrace.setBounds(async$$1.firstLineError, util$$1.lastLineError);       
      return Promise;                                                          

  };
  });

  var old;
  if (typeof Promise !== "undefined") old = Promise;
  function noConflict() {
      try { if (Promise === bluebird) Promise = old; }
      catch (e) {}
      return bluebird;
  }
  var bluebird = promise();
  bluebird.noConflict = noConflict;
  var bluebird_1 = bluebird;

  var immutable = extend;

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function extend() {
      var target = {};

      for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
              }
          }
      }

      return target
  }

  var IO = function (options) {
    this.local = options.local;
    this.remote = options.remote;
    this.targetOrigin = options.targetOrigin;
    this.secret = options.secret;
    this.handlers = options.handlers;
    this.defaultHandler = options.defaultHandler;
    this.hostHandlers = options.hostHandlers;

    this._pendingRequests = {};
    this._messageQueue = [];

    this.listen();
  };

  var ERR_NOT_HANDLED = 'not handled';
  var ERR_UNSUPPORTED_COMMAND = 'unsupported command';

  IO.NotHandled = customError('PostMessageIO:NotHandled');
  IO.NotHandled.prototype.code = ERR_NOT_HANDLED;
  IO.UnsupportedCommand = customError('PostMessageIO:UnsupportedCommand');
  IO.UnsupportedCommand.prototype.code = ERR_UNSUPPORTED_COMMAND;

  var argsFromIndex = function (args, index) {
    return Array.prototype.slice.call(args, index);
  };

  var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
  IO.randomId = function (length) {
    var idLength = length || 16;
    var rands = [];
    if (window.crypto && window.crypto.getRandomValues) {
      rands = window.crypto.getRandomValues(new Uint32Array(idLength));
    } else if (typeof window.msCrypto === 'object' && typeof window.msCrypto.getRandomValues === 'function') {
      // IE11 fallback
      rands = window.msCrypto.getRandomValues(new Uint32Array(idLength));
    } else {
      // IE10 fallback
      while (rands.length < idLength) {
        rands.push(Math.floor(Math.random() * alphabet.length));
      }
    }
    var id = [];
    for (var i = 0; i < idLength; i += 1) {
      id.push(alphabet[rands[i] % alphabet.length]);
    }
    return id.join('');
  };

  IO.prototype.listen = function () {
    var self = this;

    self.stop();
    self.listener = function (e) {
      var source = e.source;
      if (source !== self.remote && e.data.secret !== self.secret) {
        return;
      }
      var handle = function (body) {
        var data = body.data;
        switch (body.type) {
          case 'request':
            self._handleRequest(data.id, data.command, data.args, source);
            break;
          case 'response':
            self._handleResponse(data.to, data.success, data.response);
            break;
          case 'bulk':
            data.forEach(handle);
            break;
          default:
            break;
        }
      };
      handle(e.data);
    };
    this.local.addEventListener('message', self.listener);
  };

  IO.prototype.stop = function () {
    this.local.removeEventListener('message', self.listener);
  };

  IO.prototype._handleRequest = function (id, command, args, source) {
    var self = this;
    var host = immutable(self.hostHandlers, {
      NotHandled: IO.NotHandled,
      command: command,
      args: args,
      source: source,
      request: function () {
        return self.request.apply(self, argsFromIndex(arguments, 0).concat([source]));
      },
      secret: self.secret
    });

    bluebird_1.try(function () {
      if (!Object.prototype.hasOwnProperty.call(self.handlers, command)) {
        if (self.defaultHandler) {
          return self.defaultHandler.apply(self, [host, command].concat(args));
        }
        throw new IO.UnsupportedCommand('unsupported command: ' + command);
      }
      return self.handlers[command].apply(self, [host].concat(args));
    })
    .then(function (response) {
      self.respond(id, true, response, source);
    })
    .catch(IO.NotHandled, IO.UnsupportedCommand, function (error) {
      self.respond(id, false, { code: error.code, message: error.message }, source);
    })
    .done();
  };

  IO.prototype._handleResponse = function (to, success, response) {
    var self = this;
    if (!Object.prototype.hasOwnProperty.call(self._pendingRequests, to)) {
      return;
    }
    if (success) {
      self._pendingRequests[to].resolve(response);
    } else {
      var error = null;

      switch (response.code) {
        case ERR_NOT_HANDLED:
          error = new IO.NotHandled(response.message);
          break;
        case ERR_UNSUPPORTED_COMMAND:
          error = new IO.UnsupportedCommand(response.message);
          break;
        default:
          error = new Error(response.message);
      }
      self._pendingRequests[to].reject(error);
    }
  };

  IO.prototype.raw = function (type, data, target) {
    var self = this;

    if (type === 'bulk') {
      var message = {
        secret: self.secret,
        type: type,
        data: data
      };
      if (target) {
        target.postMessage(message, '*');
      } else {
        self.remote.postMessage(message, self.targetOrigin);
      }
    } else {
      if (self._messageQueue.length === 0) {
        setTimeout(self.emptyQueue.bind(self), 0);
      }
      self._messageQueue.push({ type: type, data: data, target: target });
    }
  };

  IO.prototype.emptyQueue = function () {
    var self = this;
    var queue = self._messageQueue;
    self._messageQueue = [];
    for (var i = 0; i < queue.length; i += 1) {
      var entry = queue[i];
      if (!entry.sent) {
        var target = entry.target;
        var messages = [];

        for (var j = i; j < queue.length; j += 1) {
          if (queue[j].target === target) {
            messages.push({ type: queue[j].type, data: queue[j].data });
            queue[j].sent = true;
          }
        }

        self.raw('bulk', messages, target);
      }
    }
  };

  IO.prototype.request = function (command) {
    var self = this;
    var args = argsFromIndex(arguments, 1);
    var id = IO.randomId();
    var target;
    var lastArg = args[args.length - 1];

    if (lastArg && typeof lastArg.postMessage === 'function') {
      target = args.pop();
    }

    self.raw('request', {
      id: id,
      command: command,
      args: args
    }, target);

    return new bluebird_1(function (resolve, reject) {
      self._pendingRequests[id] = {
        id: id,
        command: command,
        args: args,
        resolve: resolve,
        reject: reject
      };
    });
  };

  IO.prototype.respond = function (idRequest, success, response, target) {
    var self = this;

    self.raw('response', {
      to: idRequest,
      success: success,
      response: response
    }, target);
  };

  var lib = IO;

  var colors = {
    blue: {
      50: '#E4F0F6',
      100: '#BCD9EA',
      200: '#8BBDD9',
      300: '#5BA4CF',
      400: '#298FCA',
      500: '#0079BF',
      600: '#026AA7',
      700: '#055A8C',
      800: '#094C72',
      900: '#0C3953'
    },
    green: {
      50: '#EEF6EC',
      100: '#D6ECD2',
      200: '#B7DDB0',
      300: '#99D18F',
      400: '#7BC86C',
      500: '#61BD4F',
      600: '#5AAC44',
      700: '#519839',
      800: '#49852E',
      900: '#3F6F21'
    },
    orange: {
      50: '#FDF5EC',
      100: '#FCE8D2',
      200: '#FAD8B0',
      300: '#FDC788',
      400: '#FFB968',
      500: '#FFAB4A',
      600: '#E99E40',
      700: '#D29034',
      800: '#BB8129',
      900: '#A0711C'
    },
    red: {
      50: '#FBEDEB',
      100: '#F5D3CE',
      200: '#EFB3AB',
      300: '#EC9488',
      400: '#EF7564',
      500: '#EB5A46',
      600: '#CF513D',
      700: '#B04632',
      800: '#933B27',
      900: '#6E2F1A'
    },
    yellow: {
      50: '#FDFAE5',
      100: '#FAF3C0',
      200: '#F5EA92',
      300: '#F3E260',
      400: '#F5DD29',
      500: '#F2D600',
      600: '#E6C60D',
      700: '#D9B51C',
      800: '#CCA42B',
      900: '#BD903C'
    },
    purple: {
      50: '#F7F0FA',
      100: '#EDDBF4',
      200: '#DFC0EB',
      300: '#D5A6E6',
      400: '#CD8DE5',
      500: '#C377E0',
      600: '#A86CC1',
      700: '#89609E',
      800: '#6C547B',
      900: '#484553'
    },
    pink: {
      50: '#FEF2F9',
      100: '#FCDEF0',
      200: '#FAC6E5',
      300: '#FFB0E1',
      400: '#FF95D6',
      500: '#FF80CE',
      600: '#E76EB1',
      700: '#CD5A91',
      800: '#B44772',
      900: '#96304C'
    },
    sky: {
      50: '#E4F7FA',
      100: '#BDECF3',
      200: '#8FDFEB',
      300: '#5DD3E5',
      400: '#29CCE5',
      500: '#00C2E0',
      600: '#00AECC',
      700: '#0098B7',
      800: '#0082A0',
      900: '#006988'
    },
    lime: {
      50: '#ECFBF3',
      100: '#D3F6E4',
      200: '#B3F1D0',
      300: '#90ECC1',
      400: '#6DECA9',
      500: '#51E898',
      600: '#4FD683',
      700: '#4DC26B',
      800: '#4CAF54',
      900: '#4A9839'
    },
    gray: {
      50: '#F8F9F9',
      100: '#EDEFF0',
      200: '#E2E4E6',
      300: '#D6DADC',
      400: '#CDD2D4',
      500: '#C4C9CC',
      600: '#B6BBBF',
      700: '#A5ACB0',
      800: '#959DA1',
      900: '#838C91'
    },
    'business-blue': {
      50: '#EDEFF4',
      100: '#D2D7E5',
      200: '#B2B9D0',
      300: '#838FB5',
      400: '#6170A1',
      500: '#42548E',
      600: '#3E4D80',
      700: '#3A476F',
      800: '#36405F',
      900: '#30364C'
    }
  };

  var validWeights = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];

  var getHexString = function getHexString(name, weight) {
    if (!name || typeof name !== 'string') {
      throw new Error('Invalid color name');
    }
    var colorName = name.toLowerCase();
    if (!colors[colorName]) {
      throw new Error('Unknown color name: ' + colorName);
    }
    var colorWeight = weight || 500;
    if (validWeights.indexOf(colorWeight) === -1) {
      throw new Error('Unknown color weight: ' + colorWeight);
    }
    return colors[colorName][colorWeight];
  };

  var namedColorStringToHex = function namedColorStringToHex(s) {
    if (!s || typeof s !== 'string') {
      throw new Error('Invalid named color string');
    }
    if (/^#[a-fA-F0-9]{6}$/.test(s)) {
      return s;
    }

    // example strings: "blue", "business-blue", "green#50", "business-blue#200"
    var colorParts = /^([a-zA-Z-]+)(#[1-9]0{1,2})?$/.exec(s);
    if (!colorParts) {
      throw new Error('Invalid accentColor provided');
    }
    var colorName = colorParts[1];
    var colorWeight = 500;
    if (colorParts[2]) {
      colorWeight = parseInt(colorParts[2].substring(1), 10);
    }
    return getHexString(colorName, colorWeight);
  };

  function bytesToHexString(bytes) {
    if (!bytes) {
      return null;
    }
    // Check the incoming bytes to make sure there are no overflows that can't fit in
    // a Uint8Array (so anything over 255)
    // Why not use something like bytes.some(function (b) { b > 255 ... }) ?
    // Because for typed arrays that is not supported by IE or Safari under 10
    for (var i = 0; i < bytes.length; i += 1) {
      var b = bytes[i];
      if (typeof b !== 'number' || b % 1 !== 0 || b > 255 || b < 0) {
        throw new Error('Invalid bytes. Bytes must be 0 - 255');
      }
    }
    var buff = new Uint8Array(bytes);
    var hexBytes = [];
    for (var j = 0; j < buff.length; j += 1) {
      var byteString = buff[j].toString(16);
      if (byteString.length < 2) {
        byteString = '0' + byteString;
      }
      hexBytes.push(byteString);
    }
    return hexBytes.join('');
  }

  function hexStringToUint8Array(hexString) {
    if (!hexString) {
      throw new Error('Invalid hexString');
    }
    var hex = hexString.toLowerCase();
    if (!/^[0-9a-f]+$/.test(hex) || hex.length % 2 !== 0) {
      throw new Error('Invalid hexString');
    }
    var arrayBuffer = new Uint8Array(hex.length / 2);
    for (var i = 0; i < hex.length; i += 2) {
      var byteValue = parseInt(hex.substr(i, 2), 16);
      // eslint-disable-next-line no-restricted-globals
      if (isNaN(byteValue)) {
        throw new Error('Invalid hexString');
      }
      arrayBuffer[i / 2] = byteValue;
    }
    return arrayBuffer;
  }

  // This is free and unencumbered software released into the public domain.
  // See LICENSE.md for more information.

  //
  // Utilities
  //

  /**
   * @param {number} a The number to test.
   * @param {number} min The minimum value in the range, inclusive.
   * @param {number} max The maximum value in the range, inclusive.
   * @return {boolean} True if a >= min and a <= max.
   */
  function inRange(a, min, max) {
    return min <= a && a <= max;
  }

  /**
   * @param {*} o
   * @return {Object}
   */
  function ToDictionary(o) {
    if (o === undefined) return {};
    if (o === Object(o)) return o;
    throw TypeError('Could not convert argument to dictionary');
  }

  /**
   * @param {string} string Input string of UTF-16 code units.
   * @return {!Array.<number>} Code points.
   */
  function stringToCodePoints(string) {
    // https://heycam.github.io/webidl/#dfn-obtain-unicode

    // 1. Let S be the DOMString value.
    var s = String(string);

    // 2. Let n be the length of S.
    var n = s.length;

    // 3. Initialize i to 0.
    var i = 0;

    // 4. Initialize U to be an empty sequence of Unicode characters.
    var u = [];

    // 5. While i < n:
    while (i < n) {

      // 1. Let c be the code unit in S at index i.
      var c = s.charCodeAt(i);

      // 2. Depending on the value of c:

      // c < 0xD800 or c > 0xDFFF
      if (c < 0xD800 || c > 0xDFFF) {
        // Append to U the Unicode character with code point c.
        u.push(c);
      }

      // 0xDC00 ≤ c ≤ 0xDFFF
      else if (0xDC00 <= c && c <= 0xDFFF) {
        // Append to U a U+FFFD REPLACEMENT CHARACTER.
        u.push(0xFFFD);
      }

      // 0xD800 ≤ c ≤ 0xDBFF
      else if (0xD800 <= c && c <= 0xDBFF) {
        // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
        // CHARACTER.
        if (i === n - 1) {
          u.push(0xFFFD);
        }
        // 2. Otherwise, i < n−1:
        else {
          // 1. Let d be the code unit in S at index i+1.
          var d = string.charCodeAt(i + 1);

          // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
          if (0xDC00 <= d && d <= 0xDFFF) {
            // 1. Let a be c & 0x3FF.
            var a = c & 0x3FF;

            // 2. Let b be d & 0x3FF.
            var b = d & 0x3FF;

            // 3. Append to U the Unicode character with code point
            // 2^16+2^10*a+b.
            u.push(0x10000 + (a << 10) + b);

            // 4. Set i to i+1.
            i += 1;
          }

          // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
          // U+FFFD REPLACEMENT CHARACTER.
          else  {
            u.push(0xFFFD);
          }
        }
      }

      // 3. Set i to i+1.
      i += 1;
    }

    // 6. Return U.
    return u;
  }

  /**
   * @param {!Array.<number>} code_points Array of code points.
   * @return {string} string String of UTF-16 code units.
   */
  function codePointsToString(code_points) {
    var s = '';
    for (var i = 0; i < code_points.length; ++i) {
      var cp = code_points[i];
      if (cp <= 0xFFFF) {
        s += String.fromCharCode(cp);
      } else {
        cp -= 0x10000;
        s += String.fromCharCode((cp >> 10) + 0xD800,
                                 (cp & 0x3FF) + 0xDC00);
      }
    }
    return s;
  }


  //
  // Implementation of Encoding specification
  // https://encoding.spec.whatwg.org/
  //

  //
  // 3. Terminology
  //

  /**
   * End-of-stream is a special token that signifies no more tokens
   * are in the stream.
   * @const
   */ var end_of_stream = -1;

  /**
   * A stream represents an ordered sequence of tokens.
   *
   * @constructor
   * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the
   * stream.
   */
  function Stream(tokens) {
    /** @type {!Array.<number>} */
    this.tokens = [].slice.call(tokens);
  }

  Stream.prototype = {
    /**
     * @return {boolean} True if end-of-stream has been hit.
     */
    endOfStream: function() {
      return !this.tokens.length;
    },

    /**
     * When a token is read from a stream, the first token in the
     * stream must be returned and subsequently removed, and
     * end-of-stream must be returned otherwise.
     *
     * @return {number} Get the next token from the stream, or
     * end_of_stream.
     */
     read: function() {
      if (!this.tokens.length)
        return end_of_stream;
       return this.tokens.shift();
     },

    /**
     * When one or more tokens are prepended to a stream, those tokens
     * must be inserted, in given order, before the first token in the
     * stream.
     *
     * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
     */
    prepend: function(token) {
      if (Array.isArray(token)) {
        var tokens = /**@type {!Array.<number>}*/(token);
        while (tokens.length)
          this.tokens.unshift(tokens.pop());
      } else {
        this.tokens.unshift(token);
      }
    },

    /**
     * When one or more tokens are pushed to a stream, those tokens
     * must be inserted, in given order, after the last token in the
     * stream.
     *
     * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
     */
    push: function(token) {
      if (Array.isArray(token)) {
        var tokens = /**@type {!Array.<number>}*/(token);
        while (tokens.length)
          this.tokens.push(tokens.shift());
      } else {
        this.tokens.push(token);
      }
    }
  };

  //
  // 4. Encodings
  //

  // 4.1 Encoders and decoders

  /** @const */
  var finished = -1;

  /**
   * @param {boolean} fatal If true, decoding errors raise an exception.
   * @param {number=} opt_code_point Override the standard fallback code point.
   * @return {number} The code point to insert on a decoding error.
   */
  function decoderError(fatal, opt_code_point) {
    if (fatal)
      throw TypeError('Decoder error');
    return opt_code_point || 0xFFFD;
  }

  //
  // 7. API
  //

  /** @const */ var DEFAULT_ENCODING = 'utf-8';

  // 7.1 Interface TextDecoder

  /**
   * @constructor
   * @param {string=} encoding The label of the encoding;
   *     defaults to 'utf-8'.
   * @param {Object=} options
   */
  function TextDecoder(encoding, options) {
    if (!(this instanceof TextDecoder)) {
      return new TextDecoder(encoding, options);
    }
    encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
    if (encoding !== DEFAULT_ENCODING) {
      throw new Error('Encoding not supported. Only utf-8 is supported');
    }
    options = ToDictionary(options);

    /** @private @type {boolean} */
    this._streaming = false;
    /** @private @type {boolean} */
    this._BOMseen = false;
    /** @private @type {?Decoder} */
    this._decoder = null;
    /** @private @type {boolean} */
    this._fatal = Boolean(options['fatal']);
    /** @private @type {boolean} */
    this._ignoreBOM = Boolean(options['ignoreBOM']);

    Object.defineProperty(this, 'encoding', {value: 'utf-8'});
    Object.defineProperty(this, 'fatal', {value: this._fatal});
    Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});
  }

  TextDecoder.prototype = {
    /**
     * @param {ArrayBufferView=} input The buffer of bytes to decode.
     * @param {Object=} options
     * @return {string} The decoded string.
     */
    decode: function decode(input, options) {
      var bytes;
      if (typeof input === 'object' && input instanceof ArrayBuffer) {
        bytes = new Uint8Array(input);
      } else if (typeof input === 'object' && 'buffer' in input &&
                 input.buffer instanceof ArrayBuffer) {
        bytes = new Uint8Array(input.buffer,
                               input.byteOffset,
                               input.byteLength);
      } else {
        bytes = new Uint8Array(0);
      }

      options = ToDictionary(options);

      if (!this._streaming) {
        this._decoder = new UTF8Decoder({fatal: this._fatal});
        this._BOMseen = false;
      }
      this._streaming = Boolean(options['stream']);

      var input_stream = new Stream(bytes);

      var code_points = [];

      /** @type {?(number|!Array.<number>)} */
      var result;

      while (!input_stream.endOfStream()) {
        result = this._decoder.handler(input_stream, input_stream.read());
        if (result === finished)
          break;
        if (result === null)
          continue;
        if (Array.isArray(result))
          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
        else
          code_points.push(result);
      }
      if (!this._streaming) {
        do {
          result = this._decoder.handler(input_stream, input_stream.read());
          if (result === finished)
            break;
          if (result === null)
            continue;
          if (Array.isArray(result))
            code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
          else
            code_points.push(result);
        } while (!input_stream.endOfStream());
        this._decoder = null;
      }

      if (code_points.length) {
        // If encoding is one of utf-8, utf-16be, and utf-16le, and
        // ignore BOM flag and BOM seen flag are unset, run these
        // subsubsteps:
        if (['utf-8'].indexOf(this.encoding) !== -1 &&
            !this._ignoreBOM && !this._BOMseen) {
          // If token is U+FEFF, set BOM seen flag.
          if (code_points[0] === 0xFEFF) {
            this._BOMseen = true;
            code_points.shift();
          } else {
            // Otherwise, if token is not end-of-stream, set BOM seen
            // flag and append token to output.
            this._BOMseen = true;
          }
        }
      }

      return codePointsToString(code_points);
    }
  };

  // 7.2 Interface TextEncoder

  /**
   * @constructor
   * @param {string=} encoding The label of the encoding;
   *     defaults to 'utf-8'.
   * @param {Object=} options
   */
  function TextEncoder(encoding, options) {
    if (!(this instanceof TextEncoder))
      return new TextEncoder(encoding, options);
    encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
    if (encoding !== DEFAULT_ENCODING) {
      throw new Error('Encoding not supported. Only utf-8 is supported');
    }
    options = ToDictionary(options);

    /** @private @type {boolean} */
    this._streaming = false;
    /** @private @type {?Encoder} */
    this._encoder = null;
    /** @private @type {{fatal: boolean}} */
    this._options = {fatal: Boolean(options['fatal'])};

    Object.defineProperty(this, 'encoding', {value: 'utf-8'});
  }

  TextEncoder.prototype = {
    /**
     * @param {string=} opt_string The string to encode.
     * @param {Object=} options
     * @return {Uint8Array} Encoded bytes, as a Uint8Array.
     */
    encode: function encode(opt_string, options) {
      opt_string = opt_string ? String(opt_string) : '';
      options = ToDictionary(options);

      // NOTE: This option is nonstandard. None of the encodings
      // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,
      // so streaming is not necessary.
      if (!this._streaming)
        this._encoder = new UTF8Encoder(this._options);
      this._streaming = Boolean(options['stream']);

      var bytes = [];
      var input_stream = new Stream(stringToCodePoints(opt_string));
      /** @type {?(number|!Array.<number>)} */
      var result;
      while (!input_stream.endOfStream()) {
        result = this._encoder.handler(input_stream, input_stream.read());
        if (result === finished)
          break;
        if (Array.isArray(result))
          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
        else
          bytes.push(result);
      }
      if (!this._streaming) {
        while (true) {
          result = this._encoder.handler(input_stream, input_stream.read());
          if (result === finished)
            break;
          if (Array.isArray(result))
            bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
          else
            bytes.push(result);
        }
        this._encoder = null;
      }
      return new Uint8Array(bytes);
    }
  };

  //
  // 8. The encoding
  //

  // 8.1 utf-8

  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */
  function UTF8Decoder(options) {
    var fatal = options.fatal;

    // utf-8's decoder's has an associated utf-8 code point, utf-8
    // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
    // lower boundary (initially 0x80), and a utf-8 upper boundary
    // (initially 0xBF).
    var /** @type {number} */ utf8_code_point = 0,
        /** @type {number} */ utf8_bytes_seen = 0,
        /** @type {number} */ utf8_bytes_needed = 0,
        /** @type {number} */ utf8_lower_boundary = 0x80,
        /** @type {number} */ utf8_upper_boundary = 0xBF;

    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
      // set utf-8 bytes needed to 0 and return error.
      if (bite === end_of_stream && utf8_bytes_needed !== 0) {
        utf8_bytes_needed = 0;
        return decoderError(fatal);
      }

      // 2. If byte is end-of-stream, return finished.
      if (bite === end_of_stream)
        return finished;

      // 3. If utf-8 bytes needed is 0, based on byte:
      if (utf8_bytes_needed === 0) {

        // 0x00 to 0x7F
        if (inRange(bite, 0x00, 0x7F)) {
          // Return a code point whose value is byte.
          return bite;
        }

        // 0xC2 to 0xDF
        if (inRange(bite, 0xC2, 0xDF)) {
          // Set utf-8 bytes needed to 1 and utf-8 code point to byte
          // − 0xC0.
          utf8_bytes_needed = 1;
          utf8_code_point = bite - 0xC0;
        }

        // 0xE0 to 0xEF
        else if (inRange(bite, 0xE0, 0xEF)) {
          // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
          if (bite === 0xE0)
            utf8_lower_boundary = 0xA0;
          // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
          if (bite === 0xED)
            utf8_upper_boundary = 0x9F;
          // 3. Set utf-8 bytes needed to 2 and utf-8 code point to
          // byte − 0xE0.
          utf8_bytes_needed = 2;
          utf8_code_point = bite - 0xE0;
        }

        // 0xF0 to 0xF4
        else if (inRange(bite, 0xF0, 0xF4)) {
          // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
          if (bite === 0xF0)
            utf8_lower_boundary = 0x90;
          // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
          if (bite === 0xF4)
            utf8_upper_boundary = 0x8F;
          // 3. Set utf-8 bytes needed to 3 and utf-8 code point to
          // byte − 0xF0.
          utf8_bytes_needed = 3;
          utf8_code_point = bite - 0xF0;
        }

        // Otherwise
        else {
          // Return error.
          return decoderError(fatal);
        }

        // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code
        // point to utf-8 code point << (6 × utf-8 bytes needed) and
        // return continue.
        utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);
        return null;
      }

      // 4. If byte is not in the range utf-8 lower boundary to utf-8
      // upper boundary, run these substeps:
      if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {

        // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
        // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
        // utf-8 upper boundary to 0xBF.
        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
        utf8_lower_boundary = 0x80;
        utf8_upper_boundary = 0xBF;

        // 2. Prepend byte to stream.
        stream.prepend(bite);

        // 3. Return error.
        return decoderError(fatal);
      }

      // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
      // to 0xBF.
      utf8_lower_boundary = 0x80;
      utf8_upper_boundary = 0xBF;

      // 6. Increase utf-8 bytes seen by one and set utf-8 code point
      // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes
      // needed − utf-8 bytes seen)).
      utf8_bytes_seen += 1;
      utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));

      // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,
      // continue.
      if (utf8_bytes_seen !== utf8_bytes_needed)
        return null;

      // 8. Let code point be utf-8 code point.
      var code_point = utf8_code_point;

      // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
      // seen to 0.
      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;

      // 10. Return a code point whose value is code point.
      return code_point;
    };
  }

  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   */
  function UTF8Encoder(options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is in the range U+0000 to U+007F, return a
      // byte whose value is code point.
      if (inRange(code_point, 0x0000, 0x007f))
        return code_point;

      // 3. Set count and offset based on the range code point is in:
      var count, offset;
      // U+0080 to U+07FF:    1 and 0xC0
      if (inRange(code_point, 0x0080, 0x07FF)) {
        count = 1;
        offset = 0xC0;
      }
      // U+0800 to U+FFFF:    2 and 0xE0
      else if (inRange(code_point, 0x0800, 0xFFFF)) {
        count = 2;
        offset = 0xE0;
      }
      // U+10000 to U+10FFFF: 3 and 0xF0
      else if (inRange(code_point, 0x10000, 0x10FFFF)) {
        count = 3;
        offset = 0xF0;
      }

      // 4.Let bytes be a byte sequence whose first byte is (code
      // point >> (6 × count)) + offset.
      var bytes = [(code_point >> (6 * count)) + offset];

      // 5. Run these substeps while count is greater than 0:
      while (count > 0) {

        // 1. Set temp to code point >> (6 × (count − 1)).
        var temp = code_point >> (6 * (count - 1));

        // 2. Append to bytes 0x80 | (temp & 0x3F).
        bytes.push(0x80 | (temp & 0x3F));

        // 3. Decrease count by one.
        count -= 1;
      }

      // 6. Return bytes bytes, in order.
      return bytes;
    };
  }

  var TextEncoder_1 = TextEncoder;
  var TextDecoder_1 = TextDecoder;

  var encoding_lib = {
  	TextEncoder: TextEncoder_1,
  	TextDecoder: TextDecoder_1
  };

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  /*

  The intention of simple-crypto is to expose AES-CBC encryption & decryption methods in an
  easy to use manner, in a way that works across as many browsers as reasonable.

  Current Browser Support:

  Chrome: 41+
  Edge: 14+
  Firefox: 36+
  IE: 11+
  Safari: 7.1+ (Maverics or newer)
  iPhone: iOS 8+
  Android: 4.4+

  Why use AES-CBC which has no validation/integrity check built into the algorithm instead of
  something like AES-GCM which does? AES-GCM is sadly not supported on Safari, and therefore, AES-CBC
  was the greatest common denominator, being the most widely supported across browsers.

  Instead we use a SHA256 digest to build in our own integrity check on top of AES-CBC.

  */

  var isFunc = function isFunc(test) {
    return typeof test === 'function';
  };

  var Encoder = isFunc(window.TextEncoder) ? window.TextEncoder : encoding_lib.TextEncoder;
  var Decoder = isFunc(window.TextDecoder) ? window.TextDecoder : encoding_lib.TextDecoder;

  // Constant Encryption Settings
  var mode = 'AES-CBC';
  var aesOpts = { name: mode, length: 256 };
  var exportable = true;
  var keyUses = ['encrypt', 'decrypt'];

  // Select the right subtleCrypto function based on the browser
  var useWindowCrypto = _typeof(window.crypto) === 'object'; // Chrome, Firefox, Safari, Edge
  var useMsCrypto = !useWindowCrypto && _typeof(window.msCrypto) === 'object'; // IE11

  var subtle = void 0;
  if (useWindowCrypto) {
    // Safari still prefixes the subtle methods, so fix that if necessary
    if (window.crypto.subtle == null && window.crypto.webkitSubtle != null) {
      subtle = window.crypto.webkitSubtle;
    } else {
      // eslint-disable-next-line prefer-destructuring
      subtle = window.crypto.subtle;
    }
  } else if (useMsCrypto) {
    // eslint-disable-next-line prefer-destructuring
    subtle = window.msCrypto.subtle;
  }

  var SHA256Digest = function SHA256Digest(text) {
    var textBuff = new Encoder().encode(text);
    return new bluebird_1(function (resolve, reject) {
      if (useWindowCrypto) {
        // The digest will be an ArrayBuffer, we want to convert that to a hex string
        subtle.digest({ name: 'SHA-256' }, textBuff).then(function (digest) {
          return resolve(bytesToHexString(digest));
        });
      } else if (useMsCrypto) {
        var digestOp = subtle.digest({ name: 'SHA-256' }, textBuff);
        digestOp.oncomplete = function (e) {
          resolve(bytesToHexString(e.target.result));
        };
        digestOp.onerror = function (err) {
          reject(new Error('Error digesting text: ' + err.type));
        };
      } else {
        reject(new Error('Browser not supported.'));
      }
    });
  };

  var simpleCrypto = {
    // synchronously generate an initialization vector for later use during encryption
    generateInitVector: function generateInitVector() {
      if (useWindowCrypto && typeof window.crypto.getRandomValues === 'function') {
        return window.crypto.getRandomValues(new Uint8Array(16));
      } else if (useMsCrypto && typeof window.msCrypto.getRandomValues === 'function') {
        // IE11 fallback
        return window.msCrypto.getRandomValues(new Uint8Array(16));
      }

      throw new Error('Browser not supported.');
    },
    // returns a promise that resolves to an AES-CBC 256 bit encryption key
    generateAESCBCKey: function generateAESCBCKey() {
      return new bluebird_1(function (resolve, reject) {
        if (useWindowCrypto) {
          resolve(subtle.generateKey(aesOpts, exportable, keyUses));
        } else if (useMsCrypto) {
          // IE11 uses msCrypto, which doesn't support Promises
          var keyOp = subtle.generateKey(aesOpts, exportable, keyUses);
          keyOp.oncomplete = function (e) {
            resolve(e.target.result);
          };
          keyOp.onerror = function (err) {
            reject(new Error('Error generating key: ' + err.type));
          };
        } else {
          reject(new Error('Browser not supported.'));
        }
      });
    },
    // given a hex string representing a raw exported encryption key
    // return promise that resolves to the actual key
    importAESCBCKeyFromRaw: function importAESCBCKeyFromRaw(rawHexString) {
      var hexAsBuff = hexStringToUint8Array(rawHexString);
      return new bluebird_1(function (resolve, reject) {
        if (useWindowCrypto) {
          resolve(subtle.importKey('raw', hexAsBuff, mode, exportable, keyUses));
        } else if (useMsCrypto) {
          // IE11 uses msCrypto, which doesn't support Promises
          var importOp = subtle.importKey('raw', hexAsBuff, mode, exportable, keyUses);
          importOp.oncomplete = function (e) {
            resolve(e.target.result);
          };
          importOp.onerror = function (err) {
            reject(new Error('Error importing key: ' + err.type));
          };
        } else {
          reject(new Error('Browser not supported.'));
        }
      });
    },
    // returns a hex string representation of the encryption key
    exportAESCBCKeyToRaw: function exportAESCBCKeyToRaw(key) {
      return new bluebird_1(function (resolve, reject) {
        if (useWindowCrypto) {
          subtle.exportKey('raw', key).then(function (raw) {
            return resolve(bytesToHexString(raw));
          });
        } else if (useMsCrypto) {
          var exportOp = subtle.exportKey('raw', key);
          exportOp.oncomplete = function (e) {
            resolve(bytesToHexString(e.target.result));
          };
          exportOp.onerror = function (err) {
            reject(new Error('Error exporting key: ' + err.type));
          };
        } else {
          reject(new Error('Browser not supported.'));
        }
      });
    },
    // returns a Promise that resolves to a hex string representation of the encrypted secret.
    // The secret should be a valid UTF-8 string
    encryptSecret: function encryptSecret(initVector, key, secret) {
      return (
        // first we want to take the SHA256 of the secret to enable decrypt integrity checks
        SHA256Digest(secret).then(function (digest) {
          // prepend the plaintext with its SHA256 digest
          var secretBuff = new Encoder().encode(digest + secret);
          if (useWindowCrypto) {
            return subtle.encrypt({ name: mode, iv: initVector }, key, secretBuff).then(function (encrypted) {
              return bytesToHexString(encrypted);
            });
          } else if (useMsCrypto) {
            return new bluebird_1(function (resolve, reject) {
              var encryptOp = subtle.encrypt({ name: mode, iv: initVector }, key, secretBuff);
              encryptOp.oncomplete = function (e) {
                resolve(bytesToHexString(e.target.result));
              };
              encryptOp.onerror = function (err) {
                reject(new Error('Error encrypting secret: ' + err.type));
              };
            });
          }

          return bluebird_1.reject(new Error('Browser not supported.'));
        })
      );
    },
    // takes the initialization vector and key that were used to encrypt the secret originally, as
    // well as the encryptedSecret as a hexString, and returns a Promise that resolves to the
    // decrypted secret as a UTF-8 string
    decryptSecret: function decryptSecret(initVector, key, encryptedSecret) {
      var encryptedAsBuff = hexStringToUint8Array(encryptedSecret);
      return new bluebird_1(function (resolve, reject) {
        if (useWindowCrypto) {
          subtle.decrypt({ name: mode, iv: initVector }, key, encryptedAsBuff).then(function (decrypted) {
            resolve(new Decoder().decode(decrypted));
          }).catch(function (err) {
            reject(new Error('Decryption failed. Message: ' + err.message));
          });
        } else if (useMsCrypto) {
          var decryptOp = subtle.decrypt({ name: mode, iv: initVector }, key, encryptedAsBuff);
          decryptOp.oncomplete = function (e) {
            resolve(new Decoder().decode(e.target.result));
          };
          decryptOp.onerror = function (err) {
            reject(new Error('Decryption failed. Message: ' + err.type));
          };
        } else {
          reject(new Error('Browser not supported.'));
        }
      }).then(function (decrypted) {
        // verify the integrity of the decrypted plaintext
        var mac = decrypted.substring(0, 64);
        var plaintext = decrypted.substring(64);
        if (!/^[a-f0-9]{64}$/.test(mac)) {
          throw new Error('Decryption failed. Unable to validate integrity.');
        }
        return SHA256Digest(plaintext).then(function (digest) {
          if (digest === mac) {
            return plaintext;
          }
          throw new Error('Decryption failed. Unable to validate integrity.');
        });
      });
    },
    // returns a Promise that resolves to a hex string representing the SHA256 digest of the provided
    // UTF-8 text
    sha256Digest: SHA256Digest
  };

  var makeError_1 = createCommonjsModule(function (module, exports) {

  // ===================================================================

  var construct = typeof Reflect !== 'undefined' ? Reflect.construct : undefined;
  var defineProperty = Object.defineProperty;

  // -------------------------------------------------------------------

  var captureStackTrace = Error.captureStackTrace;
  if (captureStackTrace === undefined) {
    captureStackTrace = function captureStackTrace (error) {
      var container = new Error();

      defineProperty(error, 'stack', {
        configurable: true,
        get: function getStack () {
          var stack = container.stack;

          // Replace property with value for faster future accesses.
          defineProperty(this, 'stack', {
            configurable: true,
            value: stack,
            writable: true
          });

          return stack
        },
        set: function setStack (stack) {
          defineProperty(error, 'stack', {
            configurable: true,
            value: stack,
            writable: true
          });
        }
      });
    };
  }

  // -------------------------------------------------------------------

  function BaseError (message) {
    if (message !== undefined) {
      defineProperty(this, 'message', {
        configurable: true,
        value: message,
        writable: true
      });
    }

    var cname = this.constructor.name;
    if (
      cname !== undefined &&
      cname !== this.name
    ) {
      defineProperty(this, 'name', {
        configurable: true,
        value: cname,
        writable: true
      });
    }

    captureStackTrace(this, this.constructor);
  }

  BaseError.prototype = Object.create(Error.prototype, {
    // See: https://github.com/JsCommunity/make-error/issues/4
    constructor: {
      configurable: true,
      value: BaseError,
      writable: true
    }
  });

  // -------------------------------------------------------------------

  // Sets the name of a function if possible (depends of the JS engine).
  var setFunctionName = (function () {
    function setFunctionName (fn, name) {
      return defineProperty(fn, 'name', {
        configurable: true,
        value: name
      })
    }
    try {
      var f = function () {};
      setFunctionName(f, 'foo');
      if (f.name === 'foo') {
        return setFunctionName
      }
    } catch (_) {}
  })();

  // -------------------------------------------------------------------

  function makeError (constructor, super_) {
    if (super_ == null || super_ === Error) {
      super_ = BaseError;
    } else if (typeof super_ !== 'function') {
      throw new TypeError('super_ should be a function')
    }

    var name;
    if (typeof constructor === 'string') {
      name = constructor;
      constructor = construct !== undefined
        ? function () { return construct(super_, arguments, this.constructor) }
        : function () { super_.apply(this, arguments); };

      // If the name can be set, do it once and for all.
      if (setFunctionName !== undefined) {
        setFunctionName(constructor, name);
        name = undefined;
      }
    } else if (typeof constructor !== 'function') {
      throw new TypeError('constructor should be either a string or a function')
    }

    // Also register the super constructor also as `constructor.super_` just
    // like Node's `util.inherits()`.
    constructor.super_ = constructor['super'] = super_;

    var properties = {
      constructor: {
        configurable: true,
        value: constructor,
        writable: true
      }
    };

    // If the name could not be set on the constructor, set it on the
    // prototype.
    if (name !== undefined) {
      properties.name = {
        configurable: true,
        value: name,
        writable: true
      };
    }
    constructor.prototype = Object.create(super_.prototype, properties);

    return constructor
  }
  exports = module.exports = makeError;
  exports.BaseError = BaseError;
  });
  var makeError_2 = makeError_1.BaseError;

  var reservedBaseName = 'Error';

  var makeErrorEnum = (function (namespace, names) {
    var baseClass = makeError_1([namespace, reservedBaseName].join('::'));

    names.forEach(function (name) {
      baseClass[name] = makeError_1([namespace, name].join('::'), baseClass);
    });

    return baseClass;
  });

  var i18nError = makeErrorEnum('i18n', ['ArgNotFound', 'InvalidResourceUrl', 'KeyNotFound', 'LoadLocalizerNotAFunction', 'LocaleNotFound', 'LocaleNotSpecified', 'LocalizerNotFound', 'MissingDefaultLocale', 'MissingResourceUrl', 'MissingSupportedLocales', 'UnableToParseArgs', 'UnableToParseAttrs', 'Unknown', 'UnsupportedKeyType']);

  var urlForLocale = function urlForLocale(baseResourceUrl, locale) {
    if (baseResourceUrl.indexOf('{locale}') < 0) {
      throw new i18nError.InvalidResourceUrl('ResourceUrl must specify where to place locale with {locale}');
    }
    return baseResourceUrl.replace('{locale}', locale);
  };

  var closestSupportedLocale = function closestSupportedLocale(requestedLocale, defaultLocale, supportedLocales) {
    if (supportedLocales.indexOf(requestedLocale) > -1) {
      return requestedLocale;
    } else if (requestedLocale.indexOf('-') > -1) {
      return closestSupportedLocale(requestedLocale.split('-')[0], defaultLocale, supportedLocales);
    }
    return defaultLocale;
  };

  var Localizer = function () {
    function Localizer(resourceDictionary) {
      classCallCheck(this, Localizer);

      this.resourceDictionary = resourceDictionary;
    }

    createClass(Localizer, [{
      key: 'localize',
      value: function localize(key, args) {
        if (this.resourceDictionary[key]) {
          var rawString = this.resourceDictionary[key];
          if (args) {
            var holeRegex = /\{(\w+?)\}/gi;
            var formattedString = '';
            var hole = holeRegex.exec(rawString);
            var index = 0;
            while (hole) {
              if (hole.index > index) {
                formattedString += rawString.substring(index, hole.index);
              }
              if (args[hole[1]]) {
                formattedString += args[hole[1]];
                index = hole.index + hole[0].length;
              } else {
                throw new i18nError.ArgNotFound('Arg: ' + hole[1]);
              }
              hole = holeRegex.exec(rawString);
            }
            formattedString += rawString.substring(index);
            return formattedString;
          }
          return rawString;
        }
        throw new i18nError.KeyNotFound('Key: ' + key);
      }
    }]);
    return Localizer;
  }();

  var loadOnce = void 0;
  var localizer = void 0;
  var activeLocale = '';

  var loadLocalizer = function loadLocalizer(requestedLocale, defaultLocale, supportedLocales, resourceUrl) {
    return bluebird_1.try(function () {
      var targetLocale = void 0;
      if (!requestedLocale) {
        targetLocale = defaultLocale;
      } else {
        targetLocale = closestSupportedLocale(requestedLocale, defaultLocale, supportedLocales);
      }

      if (targetLocale === activeLocale && localizer) {
        return localizer;
      }

      if (!loadOnce) {
        loadOnce = new bluebird_1(function (resolve, reject) {
          var request = new XMLHttpRequest();

          request.open('GET', urlForLocale(resourceUrl, targetLocale), true);
          request.onload = function () {
            try {
              if (request.status === 200) {
                var resources = JSON.parse(request.responseText);
                localizer = new Localizer(resources);
                activeLocale = targetLocale;
                return resolve(localizer);
              } else if (request.status === 404) {
                return reject(new i18nError.LocaleNotFound(targetLocale + ' not found.'));
              }
              return reject(new i18nError.Unknown('Unable to load locale, status: ' + request.status));
            } catch (ex) {
              return reject(new i18nError.Unknown(ex.message));
            }
          };
          request.send();
        });
      }
      return loadOnce;
    });
  };

  var i18n = {
    loadLocalizer: loadLocalizer
  };

  var initi18n = (function (locale, options) {
    var opts = options || {};
    var errmsg = '';

    if (!locale) {
      errmsg = 'Unable to load a localizer without a locale';
      return bluebird_1.reject(new i18nError.LocaleNotSpecified(errmsg));
    }

    if (window.localizer) {
      return bluebird_1.resolve();
    } else if (opts.localizer) {
      window.localizer = opts.localizer;
    } else if (opts.loadLocalizer) {
      if (typeof opts.loadLocalizer === 'function') {
        return bluebird_1.resolve(opts.loadLocalizer(locale)).then(function (localizer) {
          window.localizer = localizer;
          return bluebird_1.resolve();
        });
      }
      errmsg = 'Specified loadLocalizer must be a function that returns a localizer or a Promise resolving to a localizer';
      return bluebird_1.reject(new i18nError.LoadLocalizerNotAFunction(errmsg));
    } else if (opts.localization) {
      var _opts$localization = opts.localization,
          defaultLocale = _opts$localization.defaultLocale,
          supportedLocales = _opts$localization.supportedLocales,
          resourceUrl = _opts$localization.resourceUrl;

      if (!defaultLocale) {
        return bluebird_1.reject(new i18nError.MissingDefaultLocale('Missing defaultLocale'));
      }
      if (!supportedLocales) {
        return bluebird_1.reject(new i18nError.MissingSupportedLocales('Missing supportedLocales'));
      }
      if (!resourceUrl) {
        return bluebird_1.reject(new i18nError.MissingResourceUrl('Missing resourceUrl'));
      }
      return i18n.loadLocalizer(locale, defaultLocale, supportedLocales, resourceUrl).then(function (localizer) {
        window.localizer = localizer;
        return bluebird_1.resolve();
      });
    }
    return bluebird_1.resolve();
  });

  var relativeUrl = (function (url) {
    if (/^https?:\/\//.test(url)) {
      return url;
    }

    return [window.location.protocol, '//', window.location.host, window.location.pathname.replace(/[^/]+$/, ''), url].join('');
  });

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      symbolTag = '[object Symbol]';

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /** Used for built-in method references. */
  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /** Built-in value references. */
  var Symbol$1 = root.Symbol,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice;

  /* Built-in method references that are verified to be native. */
  var Map$1 = getNative(root, 'Map'),
      nativeCreate = getNative(Object, 'create');

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$1.call(data, key) ? data[key] : undefined;
  }

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty$1.call(data, key);
  }

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    return this;
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
  }

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map$1 || ListCache),
      'string': new Hash
    };
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.has` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHas(object, key) {
    return object != null && hasOwnProperty$1.call(object, key);
  }

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject$1(value) || isMasked(value)) {
      return false;
    }
    var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value) {
    return isArray(value) ? value : stringToPath(value);
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = isKey(path, object) ? [path] : castPath(path);

    var result,
        index = -1,
        length = path.length;

    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result) {
      return result;
    }
    var length = object ? object.length : 0;
    return !!length && isLength(length) && isIndex(key, length) &&
      (isArray(object) || isArguments(object));
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length &&
      (typeof value == 'number' || reIsUint.test(value)) &&
      (value > -1 && value % 1 == 0 && value < length);
  }

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = memoize(function(string) {
    string = toString(string);

    var result = [];
    if (reLeadingDot.test(string)) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to process.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
  }

  // Assign cache to `_.memoize`.
  memoize.Cache = MapCache;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject(value) && hasOwnProperty$1.call(value, 'callee') &&
      (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject$1(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$1(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && objectToString.call(value) == symbolTag);
  }

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  /**
   * Checks if `path` is a direct property of `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': 2 } };
   * var other = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b');
   * // => true
   *
   * _.has(object, ['a', 'b']);
   * // => true
   *
   * _.has(other, 'a');
   * // => false
   */
  function has(object, path) {
    return object != null && hasPath(object, path, baseHas);
  }

  var lodash_has = has;

  var hashData = null;

  var arg = (function (key, defaultValue) {
    if (!hashData) {
      try {
        hashData = JSON.parse(decodeURIComponent(window.location.hash.replace(/^#/, '')));
      } catch (error) {
        hashData = {};
      }
    }
    if (lodash_has(hashData, key)) {
      return hashData[key];
    }
    return defaultValue;
  });

  /* eslint-disable no-console */
  var warn = (function (message) {
    if (window.console && typeof console.warn === 'function') {
      console.warn(message);
    }
  });

  var temporary = {};
  var retained = {};
  var index = 0;

  setInterval(function () {
    var refs = Object.keys(temporary);
    var now = Date.now();

    refs.forEach(function (ref) {
      var entry = temporary[ref];
      if (entry.expires < now) {
        delete temporary[ref];
      }
    });
  }, 5000);

  var CallbackCache = {
    callback: function callback(t, options, serializeResult) {
      var ref = options.callback;
      var action = options.action;

      var args = options.options;

      return bluebird_1.try(function () {
        switch (action) {
          case 'run':
            if (lodash_has(retained, ref)) {
              var callback = retained[ref];
              return callback.call(null, t, args);
            }
            warn('Attempted to run callback that does not exist or was not retained');
            throw t.NotHandled('callback does not exist or was not retained');
          case 'retain':
            if (lodash_has(temporary, ref)) {
              retained[ref] = temporary[ref].fx;
              delete temporary[ref];
              return ref;
            }
            warn('Attempted to retain callback that does not exist');
            throw t.NotHandled('callback can no longer be retained');
          case 'release':
            if (lodash_has(retained, ref)) {
              delete retained[ref];
              return null;
            }
            warn('Attempted to release callback that is not retained');
            throw t.NotHandled('callback can no longer be released');
          default:
            warn('Attempted an unknown callback action');
            throw t.NotHandled('unknown callback action');
        }
      }).then(serializeResult);
    },
    serialize: function serialize(fx) {
      var ref = 'cb' + (index += 1);
      temporary[ref] = {
        fx: fx,
        expires: Date.now() + 30000
      };

      return {
        _callback: ref
      };
    }
  };

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0,
      MAX_SAFE_INTEGER$1 = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      funcTag$1 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      stringTag = '[object String]',
      symbolTag$1 = '[object Symbol]';

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint$1 = /^(?:0|[1-9]\d*)$/;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return baseFindIndex(array, baseIsNaN, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$1.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString$1 = objectProto$1.toString;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$1.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object),
      nativeMax = Math.max;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    // Safari 9 makes `arguments.length` enumerable in strict mode.
    var result = (isArray$1(value) || isArguments$1(value))
      ? baseTimes(value.length, String)
      : [];

    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$2.call(value, key)) &&
          !(skipIndexes && (key == 'length' || isIndex$1(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$2.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex$1(value, length) {
    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length &&
      (typeof value == 'number' || reIsUint$1.test(value)) &&
      (value > -1 && value % 1 == 0 && value < length);
  }

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$1;

    return value === proto;
  }

  /**
   * Checks if `value` is in `collection`. If `collection` is a string, it's
   * checked for a substring of `value`, otherwise
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * is used for equality comparisons. If `fromIndex` is negative, it's used as
   * the offset from the end of `collection`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object|string} collection The collection to inspect.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
   * @returns {boolean} Returns `true` if `value` is found, else `false`.
   * @example
   *
   * _.includes([1, 2, 3], 1);
   * // => true
   *
   * _.includes([1, 2, 3], 1, 2);
   * // => false
   *
   * _.includes({ 'a': 1, 'b': 2 }, 1);
   * // => true
   *
   * _.includes('abcd', 'bc');
   * // => true
   */
  function includes(collection, value, fromIndex, guard) {
    collection = isArrayLike$1(collection) ? collection : values(collection);
    fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

    var length = collection.length;
    if (fromIndex < 0) {
      fromIndex = nativeMax(length + fromIndex, 0);
    }
    return isString(collection)
      ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
      : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
  }

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments$1(value) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject$1(value) && hasOwnProperty$2.call(value, 'callee') &&
      (!propertyIsEnumerable$1.call(value, 'callee') || objectToString$1.call(value) == argsTag$1);
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$1 = Array.isArray;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike$1(value) {
    return value != null && isLength$1(value.length) && !isFunction$1(value);
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject$1(value) {
    return isObjectLike$1(value) && isArrayLike$1(value);
  }

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$1(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject$2(value) ? objectToString$1.call(value) : '';
    return tag == funcTag$1 || tag == genTag$1;
  }

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength$1(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$2(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike$1(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' ||
      (!isArray$1(value) && isObjectLike$1(value) && objectToString$1.call(value) == stringTag);
  }

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol$1(value) {
    return typeof value == 'symbol' ||
      (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);
  }

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY$1 || value === -INFINITY$1) {
      var sign = (value < 0 ? -1 : 1);
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger(value) {
    var result = toFinite(value),
        remainder = result % 1;

    return result === result ? (remainder ? result - remainder : result) : 0;
  }

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol$1(value)) {
      return NAN;
    }
    if (isObject$2(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject$2(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike$1(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  /**
   * Creates an array of the own enumerable string keyed property values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.values(new Foo);
   * // => [1, 2] (iteration order is not guaranteed)
   *
   * _.values('hi');
   * // => ['h', 'i']
   */
  function values(object) {
    return object ? baseValues(object, keys(object)) : [];
  }

  var lodash_includes = includes;

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0,
      MAX_SAFE_INTEGER$2 = 9007199254740991;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      funcTag$2 = '[object Function]',
      genTag$2 = '[object GeneratorFunction]',
      symbolTag$2 = '[object Symbol]';

  /** Detect free variable `global` from Node.js. */
  var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap$1(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString$2 = objectProto$2.toString;

  /** Built-in value references. */
  var Symbol$2 = root$1.Symbol,
      propertyIsEnumerable$2 = objectProto$2.propertyIsEnumerable,
      spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$1 = Math.max;

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;

    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} props The property identifiers to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick(object, props) {
    object = Object(object);
    return basePickBy(object, props, function(value, key) {
      return key in object;
    });
  }

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} props The property identifiers to pick from.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */
  function basePickBy(object, props, predicate) {
    var index = -1,
        length = props.length,
        result = {};

    while (++index < length) {
      var key = props[index],
          value = object[key];

      if (predicate(value, key)) {
        result[key] = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    start = nativeMax$1(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax$1(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable(value) {
    return isArray$2(value) || isArguments$2(value) ||
      !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey$1(value) {
    if (typeof value == 'string' || isSymbol$2(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
  }

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments$2(value) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject$2(value) && hasOwnProperty$3.call(value, 'callee') &&
      (!propertyIsEnumerable$2.call(value, 'callee') || objectToString$2.call(value) == argsTag$2);
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$2 = Array.isArray;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike$2(value) {
    return value != null && isLength$2(value.length) && !isFunction$2(value);
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject$2(value) {
    return isObjectLike$2(value) && isArrayLike$2(value);
  }

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$2(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject$3(value) ? objectToString$2.call(value) : '';
    return tag == funcTag$2 || tag == genTag$2;
  }

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength$2(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$3(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike$2(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol$2(value) {
    return typeof value == 'symbol' ||
      (isObjectLike$2(value) && objectToString$2.call(value) == symbolTag$2);
  }

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [props] The property identifiers to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = baseRest(function(object, props) {
    return object == null ? {} : basePick(object, arrayMap$1(baseFlatten(props, 1), toKey$1));
  });

  var lodash_pick = pick;

  var relativeUrl$1 = function relativeUrl(url) {
    // IE has no location.origin until IE11 ...
    var origin = window.location.origin || window.location.protocol + '//' + window.location.host;
    return [origin, window.location.pathname.replace(/[^/]+$/, ''), url].join('');
  };

  var process$1 = function process(value, key) {
    if (!value) {
      return value;
    }
    if ((key === 'url' || key === 'icon') && typeof value === 'string') {
      if (value.indexOf('./') === 0) {
        return relativeUrl$1(value.substr(2));
      }
    }
    var processed = {};
    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
      case 'object':
        if (Array.isArray(value)) {
          return value.map(process);
        }
        Object.keys(value).forEach(function (k) {
          processed[k] = process(value[k], k);
        });
        return processed;
      case 'function':
        return CallbackCache.serialize(value);
      default:
        return value;
    }
  };

  var safe = (function (html) {
    return String(html === null ? '' : html).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
  });

  var validate = {
    isId: function isId(id) {
      return (/^[a-f0-9]{24}$/.test(id)
      );
    },
    isShortLink: function isShortLink(id) {
      return (/^[a-zA-Z0-9]{8}$/.test(id)
      );
    },
    isAllowedVisibilty: function isAllowedVisibilty(visibility) {
      return ['shared', 'private'].indexOf(visibility) !== -1;
    },
    isAllowedScope: function isAllowedScope(scope) {
      return ['board', 'card', 'member', 'organization'].indexOf(scope) !== -1;
    }
  };

  var MAX_PLUGINDATA_LENGTH = 4096;

  var HostHandlers = {};

  HostHandlers.getContext = function getContext() {
    return this.args[0].context;
  };

  HostHandlers.isMemberSignedIn = function isMemberSignedIn() {
    var context = this.getContext();
    return context != null && context.member !== 'notLoggedIn' && context.member != null;
  };

  HostHandlers.memberCanWriteToModel = function memberCanWriteToModel(modelType) {
    if (!this.isMemberSignedIn()) {
      return false;
    }

    var allowedModelTypes = ['board', 'card', 'organization'];
    if (typeof modelType !== 'string' || !lodash_includes(allowedModelTypes, modelType)) {
      throw new Error('modelType must be one of: board, card, organization');
    }

    var context = this.getContext();
    return context != null && context.permissions != null && context.permissions[modelType] === 'write';
  };

  HostHandlers.requestWithContext = function requestWithContext(command, options) {
    var opts = options || {};
    opts.context = this.getContext();

    return this.request(command, process$1(opts));
  };

  HostHandlers.getAll = function getAll() {
    var self = this;
    // enforce only a single data req at a time
    if (self.outstandingGetAllReq) {
      return self.outstandingGetAllReq;
    }

    self.outstandingGetAllReq = self.requestWithContext('data').then(function (data) {
      var parsed = {};

      Object.keys(data).forEach(function (scope) {
        parsed[scope] = {};
        Object.keys(data[scope]).forEach(function (visibility) {
          try {
            parsed[scope][visibility] = JSON.parse(data[scope][visibility]);
          } catch (ignored) {
            parsed[scope][visibility] = {};
          }
        });
      });

      self.outstandingGetAllReq = null;
      return parsed;
    }).catch(function (err) {
      self.outstandingGetAllReq = null;
      throw err;
    });

    return self.outstandingGetAllReq;
  };

  HostHandlers.get = function get$$1(scope, visibility, name, defaultValue) {
    var self = this;
    if (!self.outstandingGetRequests) {
      self.outstandingGetRequests = new Map();
    }

    var reqKey = 'GET';
    var opts = {};
    if (validate.isId(scope) || validate.isShortLink(scope)) {
      opts.idCard = scope;
      // eslint-disable-next-line no-param-reassign
      scope = 'card';
      reqKey = 'GET:' + opts.idCard;
    }

    if (!validate.isAllowedVisibilty(visibility)) {
      throw new Error('Invalid value for visibility.');
    }

    if (!validate.isAllowedScope(scope)) {
      throw new Error('Invalid value for scope.');
    }

    if (!self.outstandingGetRequests.has(reqKey)) {
      self.outstandingGetRequests.set(reqKey, self.requestWithContext('data', opts));
    }

    return self.outstandingGetRequests.get(reqKey).then(function (data) {
      var parsed = {};
      if (data && lodash_has(data, scope) && lodash_has(data[scope], visibility)) {
        try {
          parsed = JSON.parse(data[scope][visibility]);
        } catch (ignored) {
          // nothing to do
        }
      }
      self.outstandingGetRequests.delete(reqKey);
      // get all data at a certain scope & visibility
      if (name == null) {
        return parsed || defaultValue;
      }
      // get specific property at certain scope & visibility
      if (parsed != null && lodash_has(parsed, name)) {
        return parsed[name];
      }
      return defaultValue;
    }).catch(function (err) {
      self.outstandingGetRequests.delete(reqKey);
      throw err;
    });
  };

  HostHandlers.set = function set$$1(scope, visibility, name, value) {
    var opts = { scope: scope, visibility: visibility };
    var self = this;

    if (!validate.isAllowedVisibilty(visibility)) {
      throw new Error('Invalid value for visibility.');
    }

    if (validate.isId(scope) || validate.isShortLink(scope)) {
      opts.idCard = scope;
      opts.scope = 'card';
    }

    if (!validate.isAllowedScope(opts.scope)) {
      throw new Error('Invalid value for scope.');
    }

    return this.get(scope, visibility).then(function (data) {
      var dataAtVis = data || {};
      if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
        Object.keys(name).forEach(function (k) {
          dataAtVis[k] = name[k];
        });
      } else {
        dataAtVis[name] = value;
      }

      opts.data = JSON.stringify(dataAtVis);

      if (opts.data.length > MAX_PLUGINDATA_LENGTH) {
        throw new Error('PluginData length of ' + MAX_PLUGINDATA_LENGTH + ' characters exceeded. See: https://developers.trello.com/v1.0/reference#section-size-limit');
      }

      return self.requestWithContext('set', opts);
    });
  };

  HostHandlers.remove = function remove(scope, visibility, names) {
    var opts = { scope: scope, visibility: visibility };
    var keys = names;
    var self = this;

    if (validate.isId(scope) || validate.isShortLink(scope)) {
      opts.idCard = scope;
      opts.scope = 'card';
    }

    if (!Array.isArray(keys)) {
      keys = [names];
    }

    if (keys.some(function (key) {
      return typeof key !== 'string';
    })) {
      warn('t.remove function takes either a single string or an array of strings for which keys to remove');
      return null;
    }

    if (!validate.isAllowedScope(opts.scope)) {
      throw new Error('Invalid value for scope.');
    }

    if (!validate.isAllowedVisibilty(visibility)) {
      throw new Error('Invalid value for visibility.');
    }

    return this.get(scope, visibility).then(function (data) {
      var visData = data || {};
      keys.forEach(function (key) {
        delete visData[key];
      });

      opts.data = JSON.stringify(visData);

      return self.requestWithContext('set', opts);
    });
  };

  HostHandlers.safe = safe;

  HostHandlers.arg = function arg(name, defaultValue) {
    var options = this.args[1];
    if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && lodash_has(options, name)) {
      return options[name];
    }
    return defaultValue;
  };

  HostHandlers.signUrl = function signUrl(url, args) {
    var context = this.getContext();
    return [url, encodeURIComponent(JSON.stringify({
      secret: this.secret,
      context: context,
      locale: window.locale,
      args: args
    }))].join('#');
  };

  HostHandlers.navigate = function navigate(options) {
    if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || typeof options.url !== 'string') {
      return bluebird_1.reject(new Error('Invalid or missing url provided in options object'));
    }
    return this.requestWithContext('navigate', options);
  };

  HostHandlers.showCard = function showCard(idCard) {
    if (!idCard || typeof idCard !== 'string') {
      return bluebird_1.reject(new Error('Invalid idCard provided'));
    }
    return this.requestWithContext('showCard', { idCard: idCard });
  };

  HostHandlers.popup = function popup(options) {
    var popupOptions = {
      title: options.title,
      callback: options.callback
    };
    if (options.url) {
      popupOptions.content = {
        type: 'iframe',
        url: this.signUrl(relativeUrl(options.url), options.args),
        width: options.width,
        height: options.height
      };
    } else if (options.items) {
      var items = void 0;
      if (Array.isArray(options.items) || typeof options.items === 'function') {
        // eslint-disable-next-line prefer-destructuring
        items = options.items;
      } else {
        items = Object.keys(options.items).map(function (text) {
          var entry = options.items[text];
          if (typeof entry === 'function') {
            entry = {
              callback: entry
            };
          }

          return immutable({ text: text }, entry);
        });
      }
      popupOptions.content = {
        items: items,
        type: 'list',
        search: options.search
      };
    }
    return this.requestWithContext('popup', popupOptions);
  };

  HostHandlers.overlay = function overlay(options) {
    warn('overlay() has been deprecated. Please use modal() instead. See: https://trello.readme.io/v1.0/reference#t-modal');
    var overlayOptions = {};
    if (options.url) {
      overlayOptions.content = {
        type: 'iframe',
        url: this.signUrl(relativeUrl(options.url), options.args)
      };
    }
    return this.requestWithContext('overlay', overlayOptions);
  };

  HostHandlers.boardBar = function boardBar(options) {
    if (!options || !options.url || typeof options.url !== 'string') {
      throw new Error('BoardBar options requires a valid url');
    }
    if (options.actions && !Array.isArray(options.actions)) {
      throw new Error('BoardBar actions property must be an array');
    }
    var accentColor = void 0;
    if (options.accentColor) {
      accentColor = namedColorStringToHex(options.accentColor);
    }
    var boardBarOptions = {
      content: {
        actions: options.actions || [],
        callback: options.callback,
        accentColor: accentColor,
        height: options.height || 200,
        resizable: options.resizable || false,
        title: options.title,
        type: 'iframe',
        url: this.signUrl(relativeUrl(options.url), options.args)
      }
    };
    return this.requestWithContext('board-bar', boardBarOptions);
  };

  HostHandlers.modal = function modal(options) {
    if (!options || !options.url || typeof options.url !== 'string') {
      throw new Error('Modal options requires a valid url');
    }
    if (options.actions && !Array.isArray(options.actions)) {
      throw new Error('Modal actions property must be an array');
    }
    var accentColor = void 0;
    if (options.accentColor) {
      accentColor = namedColorStringToHex(options.accentColor);
    }
    var modalOptions = {
      content: {
        actions: options.actions || [],
        callback: options.callback,
        accentColor: accentColor,
        fullscreen: options.fullscreen || false,
        height: options.height || 400,
        title: options.title,
        type: 'iframe',
        url: this.signUrl(relativeUrl(options.url), options.args)
      }
    };
    return this.requestWithContext('modal', modalOptions);
  };

  HostHandlers.updateModal = function updateModal(options) {
    if (!options) {
      return bluebird_1.resolve();
    }
    var accentColor = options.accentColor,
        actions = options.actions,
        fullscreen = options.fullscreen,
        title = options.title;


    if (!accentColor && !actions && !fullscreen && !title) {
      // noop
      return bluebird_1.resolve();
    }
    if (options.url) {
      throw new Error('Updating Modal url not allowed');
    }
    if (options.callback) {
      throw new Error('Unable to update callback. You can set onBeforeUnload to run code before Modal close: https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload');
    }
    if (actions && !Array.isArray(actions)) {
      throw new Error('Modal actions property must be an array');
    }

    var modalOptions = {
      content: lodash_pick(options, ['actions', 'accentColor', 'fullscreen', 'title'])
    };
    if (accentColor) {
      modalOptions.content.accentColor = namedColorStringToHex(accentColor);
    }
    return this.requestWithContext('update-modal', modalOptions);
  };

  // Deprecated in favor of closePopup
  HostHandlers.hide = function hide() {
    warn('hide() handler has been deprecated. Please use closePopup()');
    return this.requestWithContext('close-popup');
  };

  HostHandlers.closePopup = function closePopup() {
    return this.requestWithContext('close-popup');
  };

  HostHandlers.back = function back() {
    return this.requestWithContext('pop-popup');
  };

  // Deprecated in favor of closeOverlay
  HostHandlers.hideOverlay = function hideOverlay() {
    warn('hideOverlay() handler has been deprecated. Please use closeOverlay()');
    return this.requestWithContext('close-overlay');
  };

  HostHandlers.closeOverlay = function closeOverlay() {
    warn('overlay() has been deprecated. Please use modal() instead. See: https://trello.readme.io/v1.0/reference#t-modal');
    return this.requestWithContext('close-overlay');
  };

  // Deprecated in favor of closeBoardBar
  HostHandlers.hideBoardBar = function hideBoardBar() {
    warn('hideBoardBar() handler has been deprecated. Please use closeBoardBar()');
    return this.requestWithContext('close-board-bar');
  };

  HostHandlers.closeBoardBar = function closeBoardBar() {
    return this.requestWithContext('close-board-bar');
  };

  HostHandlers.closeModal = function closeModal() {
    return this.requestWithContext('close-modal');
  };

  HostHandlers.sizeTo = function sizeTo(selector) {
    var el = document.querySelector(selector);
    if (el) {
      el.style.overflow = 'hidden';
      return this.requestWithContext('resize', {
        height: Math.ceil(Math.max(el.scrollHeight, el.getBoundingClientRect().height))
      });
    }

    return bluebird_1.reject(new Error('no elements matched'));
  };

  HostHandlers.localizeKey = function (key, data) {
    if (window.localizer && typeof window.localizer.localize === 'function') {
      return window.localizer.localize(key, data);
    }

    throw new i18nError.LocalizerNotFound('No localizer available for localization.');
  };

  HostHandlers.localizeKeys = function localizeKeys(keys) {
    if (!keys) {
      return [];
    }
    var self = this;
    return keys.map(function (key) {
      if (typeof key === 'string') {
        return self.localizeKey(key);
      } else if (Array.isArray(key)) {
        return self.localizeKey(key[0], key[1]);
      }

      throw new i18nError.UnsupportedKeyType('localizeKeys doesn\'t recognize the supplied key type: ' + (typeof key === 'undefined' ? 'undefined' : _typeof(key)));
    });
  };

  HostHandlers.localizeNode = function localizeNode(node) {
    var localizableNodes = node.querySelectorAll('[data-i18n-id],[data-i18n-attrs]');
    for (var i = 0, len = localizableNodes.length; i < len; i += 1) {
      var replacementArgs = {};
      var element = localizableNodes[i];
      if (element.dataset.i18nArgs) {
        try {
          replacementArgs = JSON.parse(element.dataset.i18nArgs);
        } catch (ex) {
          throw new i18nError.UnableToParseArgs('Error parsing args. Error: ' + ex.message);
        }
      }
      if (element.dataset.i18nId) {
        element.textContent = this.localizeKey(element.dataset.i18nId, replacementArgs);
      }
      if (element.dataset.i18nAttrs) {
        var requestedAttributes = void 0;
        try {
          requestedAttributes = JSON.parse(element.dataset.i18nAttrs);
        } catch (ex) {
          throw new i18nError.UnableToParseAttrs('Error parsing attrs. Error: ' + ex.message);
        }
        if (requestedAttributes && requestedAttributes.placeholder) {
          element.placeholder = this.localizeKey(requestedAttributes.placeholder, replacementArgs);
        }
      }
    }
  };

  HostHandlers.card = function card() {
    for (var _len = arguments.length, fields = Array(_len), _key = 0; _key < _len; _key++) {
      fields[_key] = arguments[_key];
    }

    return this.requestWithContext('card', { fields: fields });
  };

  HostHandlers.cards = function cards() {
    for (var _len2 = arguments.length, fields = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      fields[_key2] = arguments[_key2];
    }

    return this.requestWithContext('cards', { fields: fields });
  };

  HostHandlers.list = function list() {
    for (var _len3 = arguments.length, fields = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      fields[_key3] = arguments[_key3];
    }

    return this.requestWithContext('list', { fields: fields });
  };

  HostHandlers.lists = function lists() {
    for (var _len4 = arguments.length, fields = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      fields[_key4] = arguments[_key4];
    }

    return this.requestWithContext('lists', { fields: fields });
  };

  HostHandlers.member = function member() {
    for (var _len5 = arguments.length, fields = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      fields[_key5] = arguments[_key5];
    }

    return this.requestWithContext('member', { fields: fields });
  };

  HostHandlers.board = function board() {
    for (var _len6 = arguments.length, fields = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      fields[_key6] = arguments[_key6];
    }

    return this.requestWithContext('board', { fields: fields });
  };

  HostHandlers.organization = function organization() {
    for (var _len7 = arguments.length, fields = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      fields[_key7] = arguments[_key7];
    }

    return this.requestWithContext('organization', { fields: fields });
  };

  HostHandlers.attach = function attach(options) {
    if (!this.memberCanWriteToModel('card')) {
      throw new Error('User lacks write permission on card.');
    }

    return this.requestWithContext('attach-to-card', options);
  };

  HostHandlers.requestToken = function requestToken(options) {
    if (!this.isMemberSignedIn()) {
      throw new Error('No active member in context.');
    }

    return this.requestWithContext('request-token', options);
  };

  HostHandlers.authorize = function (authUrl, options) {
    var url = void 0;
    var secret = lib.randomId();
    var opts = options || {};

    if (typeof authUrl === 'string') {
      url = authUrl;
    } else if (typeof authUrl === 'function') {
      url = authUrl(secret);
    } else {
      warn('authorize requires a url or function that takes a secret and returns a url');
      throw new Error('Invalid arguments passed to authorize');
    }

    var isValidToken = function isValidToken() {
      return true;
    };
    if (opts.validToken && typeof opts.validToken === 'function') {
      isValidToken = opts.validToken;
    }

    var width = opts.width || 800;
    var height = opts.height || 600;
    var left = window.screenX + Math.floor((window.outerWidth - width) / 2);
    var top = window.screenY + Math.floor((window.outerHeight - height) / 2);
    var windowOpts = ['width=', width, ',height=', height, ',left=', left, ',top=', top].join('');

    var storageEventHandler = function storageEventHandler(resolve) {
      var handler = function handler(e) {
        if (e.key === 'token' && e.newValue && isValidToken(e.newValue)) {
          localStorage.removeItem('token');
          window.removeEventListener('storage', handler, false);
          delete window.authorize;
          resolve(e.newValue);
        }
      };
      return handler;
    };

    var openWindow = function openWindow(targetUrl, newWindowOpts) {
      var authWindow = window.open(targetUrl, 'authorize', newWindowOpts);
      if (typeof opts.windowCallback === 'function') {
        opts.windowCallback(authWindow);
      }
      return authWindow;
    };

    return new bluebird_1(function (resolve) {
      window.addEventListener('storage', storageEventHandler(resolve), false);
      if (typeof authUrl === 'function') {
        // eslint-disable-next-line no-new
        new lib({
          local: window,
          remote: openWindow(url, windowOpts),
          targetOrigin: opts.targetOrigin || '*',
          secret: secret,
          handlers: {
            value: function value(t, o) {
              if (o && o.token && isValidToken(o.token)) {
                this.stop();
                resolve(o.token);
              }
            }
          }
        });
      } else {
        window.authorize = function (token) {
          if (token && isValidToken(token)) {
            delete window.authorize;
            resolve(token);
          }
        };
        openWindow(url, windowOpts);
      }
    });
  };

  HostHandlers.storeSecret = function storeSecret(secretKey, secretData) {
    if (!this.isMemberSignedIn()) {
      throw new Error('No active member in context.');
    }

    var idMember = this.getContext().member;
    var storageKey = idMember + ':' + secretKey;
    var self = this;

    // Generate a SHA-256 digest of secretKey, prefixed by idMember
    return simpleCrypto.sha256Digest(storageKey)
    // check to see if we already have an encyrption key for this member
    .then(function (digestKey) {
      return self.get('member', 'private', 'aescbc').then(function (storedKey) {
        if (storedKey) {
          // we already have a key stored, return it to carry on using that one
          return storedKey;
        }

        // if we don't already have a stored encryption key we need to create and store a new one
        return simpleCrypto.generateAESCBCKey()
        // in order to store the key in Trello, we need to export it
        .then(function (key) {
          return simpleCrypto.exportAESCBCKeyToRaw(key);
        })
        // we can store this hex string of the encryption key in private plugin data
        .then(function (hexKey) {
          return self.set('member', 'private', 'aescbc', hexKey).then(function () {
            return hexKey;
          });
        });
      })
      // import the key so we can use it for encryption
      .then(function (storedKey) {
        return simpleCrypto.importAESCBCKeyFromRaw(storedKey).then(function (encryptionKey) {
          // we need to generate a new random initialization vector to use for encryption
          var initVector = simpleCrypto.generateInitVector();
          return simpleCrypto.encryptSecret(initVector, encryptionKey, secretData).then(function (encryptedData) {
            var concatedData = bytesToHexString(initVector) + ';' + encryptedData;
            window.localStorage.setItem(digestKey, concatedData);
            return {
              key: digestKey,
              value: concatedData
            };
          });
        });
      });
    });
  };

  HostHandlers.loadSecret = function loadSecret(secretKey) {
    if (!this.isMemberSignedIn()) {
      throw new Error('No active member in context.');
    }

    var idMember = this.getContext().member;
    var self = this;
    var storageKey = idMember + ':' + secretKey;
    // Generate a SHA-256 digest of secretKey, prefixed by idMember
    return simpleCrypto.sha256Digest(storageKey).then(function (secretKeyDigest) {
      return window.localStorage.getItem(secretKeyDigest);
    }).then(function (encryptedSecret) {
      if (!encryptedSecret) {
        return null;
      }

      // before we can decrypt we need to fetch the encryption key from private plugin data
      return self.get('member', 'private', 'aescbc').then(function (rawEncyptionKey) {
        if (!rawEncyptionKey) {
          return null;
        }

        // now we need to import the key so it can be used for decryption
        return simpleCrypto.importAESCBCKeyFromRaw(rawEncyptionKey).then(function (decryptionKey) {
          // before we can use this key to decrypt we need to pull out the initialization vector
          var initVector = encryptedSecret.substring(0, encryptedSecret.indexOf(';'));
          var encryptedData = encryptedSecret.substring(encryptedSecret.indexOf(';') + 1);

          // currently the initVector is a hex string, let's convert that to an arrayBuffer
          var ivBuff = hexStringToUint8Array(initVector);
          return simpleCrypto.decryptSecret(ivBuff, decryptionKey, encryptedData);
        });
      });
    });
  };

  HostHandlers.notifyParent = function (message, options) {
    var opts = options || {};
    window.parent.postMessage(message, opts.targetOrigin || '*');
  };

  var initIO = (function (handlers, options) {
    var opts = options || {};

    var io = new lib({
      local: window,
      remote: window.parent,
      targetOrigin: opts.targetOrigin || 'https://trello.com',
      secret: opts.secret,
      handlers: handlers,
      hostHandlers: opts.hostHandlers
    });

    return io;
  });

  var TrelloPlugin = function () {
    function TrelloPlugin(handlers, options) {
      classCallCheck(this, TrelloPlugin);

      var self = this;
      this.io = null;
      this.handlers = {};
      Object.keys(handlers).forEach(function (command) {
        self.handlers[command] = function handleCommand() {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var innerSelf = this;
          window.locale = args[1].locale;
          return initi18n(window.locale, options).then(function () {
            return bluebird_1.try(function () {
              return handlers[command].apply(innerSelf, args);
            }).then(process$1);
          });
        };
      });
      this.handlers.callback = function callback(t, opts) {
        return CallbackCache.callback.call(this, t, opts, process$1);
      };
      this.options = options || {};
    }

    createClass(TrelloPlugin, [{
      key: 'connect',
      value: function connect() {
        var io = initIO(this.handlers, immutable(this.options, {
          secret: arg('secret'),
          hostHandlers: HostHandlers
        }));
        this.io = io;

        return io.request('initialize', Object.keys(this.handlers)).then(function (init) {
          io.secret = init.secret;
          return io.request('ready');
        }).then(function () {
          return io;
        });
      }
    }]);
    return TrelloPlugin;
  }();

  TrelloPlugin.prototype.NotHandled = lib.NotHandled;

  var TrelloIFrame = function () {
    function TrelloIFrame(options) {
      classCallCheck(this, TrelloIFrame);

      this.io = null;
      this.args = [{
        context: arg('context'),
        secret: arg('secret')
      }].concat(arg('args'));
      this.secret = arg('secret');
      window.locale = arg('locale');
      this.options = options;
    }

    createClass(TrelloIFrame, [{
      key: 'connect',
      value: function connect() {
        var handlers = {
          callback: function callback(t, options) {
            return CallbackCache.callback.call(this, t, options, process$1);
          }
        };
        this.io = initIO(handlers, immutable(this.options, {
          secret: arg('secret'),
          hostHandlers: HostHandlers
        }));
      }
    }, {
      key: 'request',
      value: function request(command, options) {
        return this.io.request(command, options);
      }
    }, {
      key: 'render',
      value: function render(renderer) {
        var self = this;
        window.addEventListener('message', function (e) {
          if (e.source === window.parent && e.data === 'render') {
            initi18n(window.locale, self.options).then(function () {
              renderer();
            });
          }
        }, false);
      }
    }]);
    return TrelloIFrame;
  }();

  TrelloIFrame.prototype.NotHandled = lib.NotHandled;

  // eslint-disable-next-line no-restricted-syntax
  for (var method$1 in HostHandlers) {
    if (lodash_has(HostHandlers, method$1)) {
      TrelloIFrame.prototype[method$1] = HostHandlers[method$1];
    }
  }

  // https://raw.githubusercontent.com/jonathantneal/closest/master/closest.js
  // eslint-disable-next-line func-names
  (function (ELEMENT) {
    // eslint-disable-next-line no-param-reassign
    ELEMENT.matches = ELEMENT.matches || ELEMENT.mozMatchesSelector || ELEMENT.msMatchesSelector || ELEMENT.oMatchesSelector || ELEMENT.webkitMatchesSelector;
    // eslint-disable-next-line no-param-reassign
    ELEMENT.closest = ELEMENT.closest || function closest(selector) {
      var element = this;

      while (element) {
        if (element.matches(selector)) {
          break;
        }

        element = element.parentElement;
      }

      return element;
    };
  })(window.Element.prototype);

  var TrelloPowerUp = {
    initialize: function initialize(handlers, options) {
      var plugin = new TrelloPlugin(handlers, options);
      plugin.connect();
    },
    iframe: function iframe(options) {
      var iframe = new TrelloIFrame(options);
      iframe.connect();
      return iframe;
    },
    PostMessageIO: lib,
    Promise: bluebird_1,
    util: {
      colors: { getHexString: getHexString, namedColorStringToHex: namedColorStringToHex },
      convert: { bytesToHexString: bytesToHexString, hexStringToUint8Array: hexStringToUint8Array },
      crypto: simpleCrypto,
      initLocalizer: initi18n,
      makeErrorEnum: makeErrorEnum,
      relativeUrl: relativeUrl
    }
  };

  // eslint-disable-next-line func-names
  (function () {
    // eslint-disable-next-line global-require
    window.TrelloPowerUp = TrelloPowerUp;
  })();

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
